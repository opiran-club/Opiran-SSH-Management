#!/bin/bash

[[ ! -d /etc/opiran ]] && exit 0
[[ ! -d /etc/bot ]] && exit 0
source ShellBot.sh
api_bot=$1
id_admin=$2
[[ -z $api_bot ]] && exit 0
[[ -z $id_admin ]] && exit 0
[[ ! -e /usr/lib/licence ]] && exit 0
active='/etc/bot/lista_active'
suspended='/etc/bot/lista_suspended'
ShellBot.init --token "$api_bot" --monitor --return map --flush
ShellBot.username
fun_menu() {
    [[ "${message_from_id[$id]}" == "$id_admin" ]] && {
        local env_msg
        env_msg="<b>◈──────────────────◈</b>\n"
        env_msg+="<b>----------♻️ @opiranv2rayproxy ♻️----------</b>\n"
        env_msg+="<b>◈──────────────────◈</b>\n\n"
        env_msg+="⚠️ <i>SELECT AN OPTION BELOW!</i>\n\n"
	ShellBot.sendMessage --chat_id ${message_chat_id[$id]} --text "$env_msg" \
            --reply_markup "$keyboard1" \
            --parse_mode html
        return 0
    }
    [[ -d /etc/bot/suspended/${message_from_username} ]] && {
        ShellBot.sendMessage --chat_id ${message_chat_id[$id]} \
            --text "$(echo -e "🚫 YOU ARE SUSPENDED 🚫\n\nCONTACT THE ADMINISTRATOR")"
        return 0
    }
    if [[ "$(grep -w "${message_from_username}" $active | grep -wc 'resale')" != '0' ]]; then
        local env_msg
        env_msg="<b>◈──────────────────◈</b>\n"
        env_msg+="<b>----------♻️ @opiranv2rayproxy ♻️----------</b>\n"
        env_msg+="<b>◈──────────────────◈</b>\n\n"
        env_msg+="⚠️ <i>SELECT AN OPTION BELOW!</i>\n\n"
	ShellBot.sendMessage --chat_id ${message_chat_id[$id]} --text "$env_msg" \
            --reply_markup "$keyboard1" \
            --parse_mode html
        return 0
    elif [[ "$(grep -w "${message_from_username}" $active | grep -wc 'subresale')" != '0' ]]; then
        local env_msg
        env_msg="<b>◈──────────────────◈</b>\n"
        env_msg+="<b>----------♻️ @opiranv2rayproxy ♻️----------</b>\n"
        env_msg+="<b>◈──────────────────◈</b>\n\n"
        env_msg+="⚠️ <i>SELECT AN OPTION BELOW!</i>\n\n"
	ShellBot.sendMessage --chat_id ${message_chat_id[$id]} --text "$env_msg" \
            --reply_markup "$keyboard1" \
            --parse_mode html
        return 0
    else
        ShellBot.sendMessage --chat_id ${message_chat_id[$id]} \
            --text "$(echo -e 🚫 ACCESS DENIED 🚫)"
        return 0
    fi
}

fun_help() {
    [[ ${message_chat_id[$id]} == "" ]] && {
        id_chatuser="${callback_query_message_chat_id[$id]}"
        id_name="${callback_query_from_username}"
    } || {
        id_chatuser="${message_chat_id[$id]}"
        id_name="${message_from_username}"
    }
    if [[ "$id_chatuser" = "$id_admin" ]]; then
        local env_msg
        env_msg="<b>◈──────────────────◈</b>\n"
        env_msg+="<b>----------♻️ @opiranv2rayproxy ♻️----------</b>\n"
        env_msg+="<b>◈──────────────────◈</b>\n\n"
        env_msg+="⚠️ <b>Available Commands</b>\n\n"
        env_msg+="[<b>01</b>] /menu = Display menu\n"
        env_msg+="[<b>02</b>] /info = Display information\n"
        env_msg+="[<b>03</b>] /help = Information about options\n\n"
        env_msg+="⚠️ <b>Available Options</b>\n\n"
        env_msg+="• <u>CREATE USER</u> = Create ssh user\n\n"
        env_msg+="• <u>CREATE TEST</u> = Create ssh test\n\n"
        env_msg+="• <u>REMOVE</u> = Remove ssh user\n\n"
        env_msg+="• <u>USER INFO</u> = User Information\n\n"
        env_msg+="• <u>ONLINE USERS</u> = Display Online Users\n\n"
        env_msg+="• <u>VPS INFO</u> = Server Information\n\n"
        env_msg+="• <u>CHANGE PASSWORD</u> = Change ssh password\n\n"
        env_msg+="• <u>CHANGE LIMIT</u> = Change ssh limit\n\n"
        env_msg+="• <u>CHANGE DATE</u> = Change date ssh\n\n"
        env_msg+="• <u>EXPIRED</u> = Remove expired ssh\n\n"
        env_msg+="• <u>BACKUP</u> = Create ssh Backup and resellers\n\n"
        env_msg+="• <u>OPTIMIZE</u> = Clear cache - ram\n\n"
        env_msg+="• <u>SPEEDTEST</u> = Connection test\n\n"
        env_msg+="• <u>FILES</u> = Host Files\n\n"
        env_msg+="• <u>RESALE</u> = Manage Resellers\n\n"
        env_msg+="• <u>AUTOBACKUP</u> = On/Off Automatic Backup\n\n"
        env_msg+="• <u>REPORT</u> = Information about resellers\n\n"
        env_msg+="• <u>HELP</u> = Information about options\n\n"
        ShellBot.sendMessage --chat_id $id_chatuser \
            --text "$(echo -e $env_msg)" \
            --parse_mode html
	ShellBot.sendMessage --chat_id $id_chatuser \
            --text "$(echo -e ✅ All Tutorials , Updates : @@opiranv2rayproxy)"
        return 0
    elif [[ -d /etc/bot/suspended/$id_name ]]; then
        ShellBot.sendMessage --chat_id $id_chatuser \
            --text "$(echo -e "🚫 YOU ARE SUSPENDED 🚫\n\nCONTACT THE ADMINISTRATOR")"
	ShellBot.sendSticker --chat_id $id_chatuser \
            --sticker "CAACAgEAAxkBAAEDbIdhrlBIJ-fUNJHXn-g352lK26WtBQACYgEAAgkeUEUw-f8AAZo7VDciBA"
        return 0
    elif [[ "$(grep -w "$id_name" $active | awk '{print $NF}')" == 'resale' ]]; then
        local env_msg
        env_msg="<b>◈──────────────────◈</b>\n"
        env_msg+="<b>----------♻️ @opiranv2rayproxy ♻️----------</b>\n"
        env_msg+="<b>◈──────────────────◈</b>\n\n"
        env_msg+="⚠️ <b>Available Commands</b>\n\n"
        env_msg+="[<b>01</b>] /menu = Display menu\n"
        env_msg+="[<b>02</b>] /info = Display information\n"
        env_msg+="[<b>03</b>] /help = Information about options\n\n"
        env_msg+="⚠️ <b>Available Options</b>\n\n"
        env_msg+="• <u>CREATE USER</u> = Create ssh user\n\n"
        env_msg+="• <u>CREATE TEST</u> = Create ssh test\n\n"
        env_msg+="• <u>REMOVE</u> = Remove ssh user\n\n"
        env_msg+="• <u>USER INFO</u> = User Information\n\n"
        env_msg+="• <u>ONLINE USERS</u> = Display Online Users\n\n"
        env_msg+="• <u>CHANGE PASSWORD</u> = Change ssh password\n\n"
        env_msg+="• <u>CHANGE LIMIT</u> = Change ssh limit\n\n"
        env_msg+="• <u>CHANGE DATE</u> = Change date ssh\n\n"
        env_msg+="• <u>EXPIRED</u> = Remove expired ssh\n\n"
        env_msg+="• <u>RESALE</u> = Manage Resellers\n\n"
        env_msg+="• <u>REPORT</u> = Information about resellers\n\n"
        env_msg+="• <u>HELP</u> = Information about options\n\n"
        ShellBot.sendMessage --chat_id $id_chatuser \
            --text "$(echo -e $env_msg)" \
            --parse_mode html
	ShellBot.sendMessage --chat_id $id_chatuser \
            --text "$(echo -e ✅ All Tutorials , Updates : @@opiranv2rayproxy)"
        return 0
    elif [[ "$(grep -w "$id_name" $active | awk '{print $NF}')" == 'subresale' ]]; then
        local env_msg
        env_msg="<b>◈──────────────────◈</b>\n"
        env_msg+="<b>----------♻️ @opiranv2rayproxy ♻️----------</b>\n"
        env_msg+="<b>◈──────────────────◈</b>\n\n"
        env_msg+="⚠️ <b>Available Commands</b>\n\n"
        env_msg+="[<b>01</b>] /menu = display menu\n"
        env_msg+="[<b>02</b>] /info = Display information\n"
        env_msg+="[<b>03</b>] /help = Information about options\n\n"
        env_msg+="⚠️ <b>Available Options</b>\n\n"
        env_msg+="• <u>CREATE USER</u> = Create ssh user\n\n"
        env_msg+="• <u>CREATE TEST</u> = Create ssh test\n\n"
        env_msg+="• <u>REMOVE</u> = Remove ssh user\n\n"
        env_msg+="• <u>USER INFO</u> = User information\n\n"
        env_msg+="• <u>ONLINE USERS</u> = Display users online\n\n"
        env_msg+="• <u>CHANGE PASSWORD</u> = Change ssh password\n\n"
        env_msg+="• <u>CHANGE LIMIT</u> = Change ssh limit\n\n"
        env_msg+="• <u>CHANGE DATE</u> = Change ssh date\n\n"
        env_msg+="• <u>EXPIRED</u> = Remove expired ssh\n\n"
        env_msg+="• <u>HELP</u> = Information about options\n\n"
        ShellBot.sendMessage --chat_id $id_chatuser \
            --text "$(echo -e $env_msg)" \
            --parse_mode html
	ShellBot.sendMessage --chat_id $id_chatuser \
            --text "✅ All Tutorials , Updates : @@opiranv2rayproxy"
        return 0
    else
        ShellBot.sendMessage --chat_id $id_chatuser \
            --text "$(echo -e 🚫 ACCESS DENIED 🚫)"
	ShellBot.sendSticker --chat_id $id_chatuser \
            --sticker "CAACAgEAAxkBAAEDbIdhrlBIJ-fUNJHXn-g352lK26WtBQACYgEAAgkeUEUw-f8AAZo7VDciBA"
        return 0
    fi
}

verifica_access() {
    [[ "${message_from_id[$id]}" != "$id_admin" ]] && {
        [[ "$(grep -wc ${message_from_username} $suspended)" != '0' ]] || [[ "$(grep -wc ${message_from_username} $active)" == '0' ]] && {
            _erro="1"
            return 0
        }
    }
}

fun_adduser() {
    [[ "$(grep -wc ${callback_query_from_username} $suspended)" != '0' ]] && {
        ShellBot.answerCallbackQuery --callback_query_id ${callback_query_id[$id]} \
            --text "⚠️ YOU ARE SUSPENDED! CONTACT THE ADMINISTRATOR"
        return 0
    }
    [[ "${callback_query_from_id[$id]}" == "$id_admin" ]] || [[ "$(grep -wc ${callback_query_from_username} $active)" != '0' ]] && {
        ShellBot.sendMessage --chat_id ${callback_query_message_chat_id[$id]} \
            --text "👤 CREATE USER 👤\n\nUsername:" \
            --reply_markup "$(ShellBot.ForceReply)"
    } || {
        ShellBot.answerCallbackQuery --callback_query_id ${callback_query_id[$id]} \
            --text "🚫 ACCESS DENIED 🚫"
        return 0
    }
}

create_user() {
    IP=$(cat /etc/IP)
    newclient() {
        cp /etc/openvpn/client-common.txt ~/$1.ovpn
        echo "<ca>" >>~/$1.ovpn
        cat /etc/openvpn/easy-rsa/pki/ca.crt >>~/$1.ovpn
        echo "</ca>" >>~/$1.ovpn
        echo "<cert>" >>~/$1.ovpn
        cat /etc/openvpn/easy-rsa/pki/issued/$1.crt >>~/$1.ovpn
        echo "</cert>" >>~/$1.ovpn
        echo "<key>" >>~/$1.ovpn
        cat /etc/openvpn/easy-rsa/pki/private/$1.key >>~/$1.ovpn
        echo "</key>" >>~/$1.ovpn
        echo "<tls-auth>" >>~/$1.ovpn
        cat /etc/openvpn/ta.key >>~/$1.ovpn
        echo "</tls-auth>" >>~/$1.ovpn
    }
    file_user=$1
    user=$(sed -n '1 p' $file_user | cut -d' ' -f2)
    password=$(sed -n '2 p' $file_user | cut -d' ' -f2)
    limit=$(sed -n '3 p' $file_user | cut -d' ' -f2)
    date=$(sed -n '4 p' $file_user | cut -d' ' -f2)
    validity=$(echo "$date" | awk -F'/' '{print $2FS$1FS$3}' | xargs -i date -d'{}' +%Y/%m/%d)

    useradd -M -N -s /bin/false $user -e $validity >/dev/null 2>&1
    (
        echo "${password}"
        echo "${password}"
    ) | passwd "${user}" >/dev/null 2>&1
    [[ "${message_from_id[$id]}" != "$id_admin" ]] && {
        echo "$user:$password:$info_date:$limit" >/etc/bot/resale/${message_from_username}/users/$user
        echo "$user:$password:$info_date:$limit" >/etc/bot/info-users/$user
    }
    echo "$user $limit" >>/root/users.db
    echo "$password" >/etc/opiran/password/$user
    [[ -e "/etc/openvpn/server.conf" ]] && {
        cd /etc/openvpn/easy-rsa/
        ./easyrsa build-client-full $user nopass
        newclient "$user"
    }
}

fun_deluser() {
    [[ "$(grep -wc ${callback_query_from_username} $suspended)" != '0' ]] && {
        ShellBot.answerCallbackQuery --callback_query_id ${callback_query_id[$id]} \
            --text "⚠️ YOU ARE SUSPENDED! CONTACT THE ADMINISTRATOR"
        return 0
    }
    [[ "${callback_query_from_id[$id]}" == "$id_admin" ]] || [[ "$(grep -wc ${callback_query_from_username} $active)" != '0' ]] && {
        ShellBot.sendMessage --chat_id ${callback_query_message_chat_id[$id]} \
            --text "🗑 REMOVE USER 🗑\n\nUsername:" \
            --reply_markup "$(ShellBot.ForceReply)"
    } || {
        ShellBot.answerCallbackQuery --callback_query_id ${callback_query_id[$id]} \
            --text "🚫 ACCESS DENIED 🚫"
        return 0
    }
}

fun_del_user() {
    user=$1
    [[ "${message_from_id[$id]}" = "$id_admin" ]] && {
        piduser=$(ps -u "$user" | grep sshd | cut -d? -f1)
        kill -9 $piduser >/dev/null 2>&1
        userdel --force "$user" 2>/dev/null
        grep -v ^$user[[:space:]] /root/users.db >/tmp/ph
        cat /tmp/ph >/root/users.db
        rm /etc/opiran/password/$user >/dev/null 2>&1
    } || {
        [[ ! -e /etc/bot/resale/${message_from_username}/users/$user ]] && {
            ShellBot.sendMessage --chat_id ${message_chat_id[$id]} \
                --text "$(echo -e "❌ THE USER DOES NOT EXIST ❌")" \
                --parse_mode html
            _erro='1'
            return 0
        }
        piduser=$(ps -u "$user" | grep sshd | cut -d? -f1)
        kill -9 $piduser >/dev/null 2>&1
        userdel --force "$user" 2>/dev/null
        grep -v ^$user[[:space:]] /root/users.db >/tmp/ph
        cat /tmp/ph >/root/users.db
        rm /etc/opiran/password/$user >/dev/null 2>&1
        rm /etc/bot/resale/${message_from_username}/users/$user
        rm /etc/bot/info-users/$user
    }
    [[ -e /etc/opiran/usertest/$user.sh ]] && rm /etc/opiran/usertest/$user.sh
    [[ -e "/etc/openvpn/easy-rsa/pki/private/$user.key" ]] && {
        [[ -e /etc/debian_version ]] && GROUPNAME=nogroup
        cd /etc/openvpn/easy-rsa/
        ./easyrsa --batch revoke $user
        ./easyrsa gen-crl
        rm -rf pki/reqs/$user.req
        rm -rf pki/private/$user.key
        rm -rf pki/issued/$user.crt
        rm -rf /etc/openvpn/crl.pem
        cp /etc/openvpn/easy-rsa/pki/crl.pem /etc/openvpn/crl.pem
        chown nobody:$GROUPNAME /etc/openvpn/crl.pem
        [[ -e $HOME/$user.ovpn ]] && rm $HOME/$user.ovpn >/dev/null 2>&1
    }
}

alter_password() {
    [[ "$(grep -wc ${callback_query_from_username} $suspended)" != '0' ]] && {
        ShellBot.answerCallbackQuery --callback_query_id ${callback_query_id[$id]} \
            --text "⚠️ YOU ARE SUSPENDED! CONTACT THE ADMINISTRATOR"
        return 0
    }
    [[ "${callback_query_from_id[$id]}" == "$id_admin" ]] || [[ "$(grep -wc ${callback_query_from_username} $active)" != '0' ]] && {
        ShellBot.sendMessage --chat_id ${callback_query_message_chat_id[$id]} \
            --text "🔐 Change Password 🔐\n\nUsername:" \
            --reply_markup "$(ShellBot.ForceReply)"
    } || {
        ShellBot.answerCallbackQuery --callback_query_id ${callback_query_id[$id]} \
            --text "🚫 ACCESS DENIED 🚫"
        return 0
    }
}

alter_password_user() {
    user=$1
    password=$2
    echo "$user:$password" | chpasswd
    echo "$password" >/etc/opiran/password/$user
    [[ -e /etc/bot/resale/${message_from_username}/users/$user ]] && {
        password2=$(cat /etc/bot/resale/${message_from_username}/users/$user | awk -F : {'print $2'})
        sed -i "/$user/ s/\b$password2\b/$password/g" /etc/bot/resale/${message_from_username}/users/$user
        sed -i "/$user/ s/\b$password2\b/$password/g" /etc/bot/info-users/$user
    }
    [[ $(ps -u $user | grep sshd | wc -l) != '0' ]] && pkill -u $user >/dev/null 2>&1
}

alter_limit() {
    [[ "$(grep -wc ${callback_query_from_username} $suspended)" != '0' ]] && {
        ShellBot.answerCallbackQuery --callback_query_id ${callback_query_id[$id]} \
            --text "⚠️ YOU ARE SUSPENDED! CONTACT THE ADMINISTRATOR"
        return 0
    }
    [[ "${callback_query_from_id[$id]}" == "$id_admin" ]] || [[ "$(grep -wc ${callback_query_from_username} $active)" != '0' ]] && {
        ShellBot.sendMessage --chat_id ${callback_query_message_chat_id[$id]} \
            --text "👥 Change Limit 👥\n\nUsername:" \
            --reply_markup "$(ShellBot.ForceReply)"
    } || {
        ShellBot.answerCallbackQuery --callback_query_id ${callback_query_id[$id]} \
            --text "🚫 ACCESS DENIED 🚫"
        return 0
    }
}

alter_limit_user() {
    user=$1
    limit=$2
    datebase="/root/users.db"
    [[ "${message_from_id[$id]}" == "$id_admin" ]] && {
        grep -v ^$user[[:space:]] /root/users.db >/tmp/a
        mv /tmp/a /root/users.db
        echo $user $limit >>/root/users.db
        return 0
    }
    [[ -d /etc/bot/resale/${message_from_username} ]] && {
        [[ ! -e /etc/bot/resale/${message_from_username}/users/$user ]] && {
            ShellBot.sendMessage --chat_id ${message_chat_id[$id]} \
                --text "$(echo -e "❌ THE USER DOES NOT EXIST ❌")" \
                --parse_mode html
            _erro='1'
            return 0
        }
        _limTotal=$(grep -w 'limit_resale' /etc/bot/resale/${message_from_username}/${message_from_username} | awk '{print $NF}')
        [[ "$limit" -gt "$_limTotal" ]] && {
            ShellBot.sendMessage --chat_id ${message_chat_id[$id]} \
                --text "$(echo -e "❌ YOU HAVE NO ENOUGH LIMIT ❌\n\nCurrent Limit: $_limTotal ")" \
                --parse_mode html
            _erro='1'
            return 0
        }
        _limTotal=$(grep -w "${message_from_username}" $active | awk '{print $4}')
        fun_verif_limit_rev ${message_from_username}
        _limsomarev2=$(echo "$_result + $limit" | bc)
        echo "Total $_limsomarev2"
        [[ "$_limsomarev2" -gt "$_limTotal" ]] && {
            [[ "$_limTotal" == "$(($_limTotal - $_result))" ]] && _restant1='0' || _restant1=$(($_limTotal - $_result))
            ShellBot.sendMessage --chat_id ${message_chat_id[$id]} \
                --text "$(echo -e "❌ You don't have enough limit\n\nRemaining limit: $_restant1 ")" \
                --parse_mode html
            _erro='1'
            return 0
        }
        grep -v ^$user[[:space:]] /root/users.db >/tmp/a
        mv /tmp/a /root/users.db
        echo $user $limit >>/root/users.db
        limit2=$(cat /etc/bot/resale/${message_from_username}/users/$user | awk -F : {'print $4'})
        sed -i "/\b$user\b/ s/\b$limit2\b/$limit/" /etc/bot/resale/${message_from_username}/users/$user
        sed -i "/\b$user\b/ s/\b$limit2\b/$limit/" /etc/bot/info-users/$user
    }
}

alter_date() {
    [[ "$(grep -wc ${callback_query_from_username} $suspended)" != '0' ]] && {
        ShellBot.answerCallbackQuery --callback_query_id ${callback_query_id[$id]} \
            --text "⚠️ YOU ARE SUSPENDED! CONTACT THE ADMINISTRATOR"
        return 0
    }
    [[ "${callback_query_from_id[$id]}" == "$id_admin" ]] || [[ "$(grep -wc ${callback_query_from_username} $active)" != '0' ]] && {
        ShellBot.sendMessage --chat_id ${callback_query_message_chat_id[$id]} \
            --text "⏳ Change Date ⏳\n\nUsername:" \
            --reply_markup "$(ShellBot.ForceReply)"
    } || {
        ShellBot.answerCallbackQuery --callback_query_id ${callback_query_id[$id]} \
            --text "🚫 ACCESS DENIED 🚫"
        return 0
    }
}

alter_date_user() {
    user=$1
    inputdate=$2
    datebase="/root/users.db"
    [[ "$(echo -e "$inputdate" | sed -e 's/[^/]//ig')" != '//' ]] && {
        udate=$(date "+%d/%m/%Y" -d "+$inputdate days")
        sysdate="$(echo "$udate" | awk -v FS=/ -v OFS=- '{print $3,$2,$1}')"
    } || {
        udate=$(echo -e "$inputdate")
        sysdate="$(echo -e "$inputdate" | awk -v FS=/ -v OFS=- '{print $3,$2,$1}')"
        today="$(date -d today +"%Y%m%d")"
        timemachine="$(date -d "$sysdate" +"%Y%m%d")"
        [ $today -ge $timemachine ] && {
            verify='1'
            ShellBot.sendMessage --chat_id ${message_chat_id[$id]} \
                --text "$(echo -e "❌ Error! Invalid date")" \
                --parse_mode html
            _erro='1'
            return 0
        }
    }
    chage -E $sysdate $user
    [[ -e /etc/bot/resale/${message_from_username}/users/$user ]] && {
        date2=$(cat /etc/bot/info-users/$user | awk -F : {'print $3'})
        sed -i "s;$date2;$udate;" /etc/bot/info-users/$user
        echo $user $udate ${message_from_username}
        sed -i "s;$date2;$udate;" /etc/bot/resale/${message_from_username}/users/$user
    }
}

ver_users() {
    if [[ "${callback_query_from_id[$id]}" == "$id_admin" ]]; then
        arq_info=/tmp/$(echo $RANDOM)
        local info_users
        info_users='◈──────────────────◈\n'
        info_users+='<b>USER INFORMATION</b>\n'
        info_users+='◈──────────────────◈\n\n'
        info_users+='⚠️ Displays in the format below:\n\n'
        info_users+='<code>USER PASSWORD DATE LIMIT</code>\n'
        ShellBot.sendMessage --chat_id $id_admin \
            --text "$(echo -e $info_users)" \
            --parse_mode html
        fun_infu() {
            local info
            for user in $(cat /etc/passwd | awk -F : '$3 >= 1000 {print $1}' | grep -v nobody); do
                info='◈──────────────────◈\n'
                [[ -e /etc/opiran/password/$user ]] && password=$(cat /etc/opiran/password/$user) || password='Null'
                [[ $(grep -wc $user $HOME/users.db) != '0' ]] && limit=$(grep -w $user $HOME/users.db | cut -d' ' -f2) || limit='Null'
                dateuser=$(chage -l $user | grep -i co | awk -F : '{print $2}')
                [[ $dateuser = ' never' ]] && {
                    date="00/00/00"
                } || {
                    datebr="$(date -d "$dateuser" +"%Y%m%d")"
                    hoje="$(date -d today +"%Y%m%d")"
                    [[ $hoje -ge $datebr ]] && {
                        date="Venceu"
                    } || {
                        dat="$(date -d"$dateuser" '+%Y-%m-%d')"
                        date=$(echo -e "$((($(date -ud $dat +%s) - $(date -ud $(date +%Y-%m-%d) +%s)) / 86400)) DAYS")
                    }
                }
                info+="$user • $password • $limit • $date"
                echo -e "$info"
            done
        }
        fun_infu >$arq_info
        while :; do
            ShellBot.sendMessage --chat_id $id_admin \
                --text "$(while read line; do echo $line; done < <(sed '1,30!d' $arq_info))" \
                --parse_mode html
            sed -i 1,30d $arq_info
            [[ $(cat $arq_info | wc -l) = '0' ]] && rm $arq_info && break
        done
    elif [[ "$(grep -wc "${callback_query_from_username}" $active)" != '0' ]]; then
        [[ "$(grep -wc ${callback_query_from_username} $suspended)" != '0' ]] && {
            ShellBot.answerCallbackQuery --callback_query_id ${callback_query_id[$id]} \
                --text "⚠️YOU ARE SUSPENDED! CONTACT THE ADMINISTRATOR"
            return 0
        }
        [[ $(ls /etc/bot/resale/${callback_query_from_username}/users | wc -l) == '0' ]] && {
            ShellBot.answerCallbackQuery --callback_query_id ${callback_query_id[$id]} \
                --text "YOU HASN'T CREATED USER YET!"
            return 0
        }
        arq_info=/tmp/$(echo $RANDOM)
        local info_users
        info_users='◈──────────────────◈\n'
        info_users+='<b>USER INFORMATION</b>\n'
        info_users+='◈──────────────────◈\n\n'
        info_users+='⚠️ Displays in the format below:\n\n'
        info_users+='<code>USER PASSWORD DATE LIMIT</code>\n'
        ShellBot.sendMessage --chat_id ${callback_query_message_chat_id[$id]} \
            --text "$(echo -e $info_users)" \
            --parse_mode html
        fun_infu() {
            local info
            for user in $(ls /etc/bot/resale/${callback_query_from_username}/users); do
                info='◈──────────────────◈\n'
                [[ -e /etc/opiran/password/$user ]] && password=$(cat /etc/opiran/password/$user) || password='Null'
                [[ $(grep -wc $user $HOME/users.db) != '0' ]] && limit=$(grep -w $user $HOME/users.db | cut -d' ' -f2) || limit='Null'
                dateuser=$(chage -l $user | grep -i co | awk -F : '{print $2}')
                [[ $dateuser = ' never' ]] && {
                    date="00/00/00"
                } || {
                    datebr="$(date -d "$dateuser" +"%Y%m%d")"
                    hoje="$(date -d today +"%Y%m%d")"
                    [[ $hoje -ge $datebr ]] && {
                        date="Venceu"
                    } || {
                        dat="$(date -d"$dateuser" '+%Y-%m-%d')"
                        date=$(echo -e "$((($(date -ud $dat +%s) - $(date -ud $(date +%Y-%m-%d) +%s)) / 86400)) DAYS")
                    }
                }
                info+="$user • $password • $limit • $date"
                echo -e "$info"
            done
        }
        fun_infu >$arq_info
        while :; do
            ShellBot.sendMessage --chat_id ${callback_query_message_chat_id[$id]} \
                --text "$(while read line; do echo $line; done < <(sed '1,30!d' $arq_info))" \
                --parse_mode html
            sed -i 1,30d $arq_info
            [[ $(cat $arq_info | wc -l) = '0' ]] && rm $arq_info && break
        done
    else
        ShellBot.answerCallbackQuery --callback_query_id ${callback_query_id[$id]} \
            --text "$(echo -e 🚫 ACCESS DENIED 🚫)"
        return 0
    fi
}

fun_drop() {
    port_dropbear=$(ps aux | grep dropbear | awk NR==1 | awk '{print $17;}')
    log=/var/log/auth.log
    loginsukses='Password auth succeeded'
    pids=$(ps ax | grep dropbear | grep " $port_dropbear" | awk -F" " '{print $1}')
    for pid in $pids; do
        pidlogs=$(grep $pid $log | grep "$loginsukses" | awk -F" " '{print $3}')
        i=0
        for pidend in $pidlogs; do
            let i=i+1
        done
        if [ $pidend ]; then
            login=$(grep $pid $log | grep "$pidend" | grep "$loginsukses")
            PID=$pid
            user=$(echo $login | awk -F" " '{print $10}' | sed -r "s/'/ /g")
            waktu=$(echo $login | awk -F" " '{print $2"-"$1,$3}')
            while [ ${#waktu} -lt 13 ]; do
                waktu=$waktu" "
            done
            while [ ${#user} -lt 16 ]; do
                user=$user" "
            done
            while [ ${#PID} -lt 8 ]; do
                PID=$PID" "
            done
            echo "$user $PID $waktu"
        fi
    done
}

monitor_ssh() {
    if [[ "${callback_query_from_id[$id]}" == "$id_admin" ]]; then
        datebase="/root/users.db"
        cad_onli=/tmp/$(echo $RANDOM)
        local info_on
        info_on='◈──────────────────◈\n'
        info_on+='<b>ONLINES USERS MONITOR</b>\n'
        info_on+='◈──────────────────◈\n\n'
        info_on+='⚠️ Displays in the format below:\n\n'
        info_on+='<code>ONLIN USERE/TIME LIMIT\n</code>'
        ShellBot.sendMessage --chat_id ${callback_query_message_chat_id[$id]} \
            --text "$(echo -e $info_on)" \
            --parse_mode html
        fun_online() {
            local info2
            for user in $(cat /etc/passwd | awk -F : '$3 >= 1000 {print $1}' | grep -v nobody); do
                [[ "$(grep -w $user $datebase)" != "0" ]] && lim="$(grep -w $user $datebase | cut -d' ' -f2)" || lim=0
                [[ $(netstat -nltp | grep 'dropbear' | wc -l) != '0' ]] && drop="$(fun_drop | grep "$user" | wc -l)" || drop=0
                [[ -e /etc/openvpn/openvpn-status.log ]] && ovp="$(cat /etc/openvpn/openvpn-status.log | grep -E ,"$user", | wc -l)" || ovp=0
                sqd="$(ps -u $user | grep sshd | wc -l)"
                _cont=$(($drop + $ovp))
                conex=$(($_cont + $sqd))
                [[ $conex -gt '0' ]] && {
                    timerr="$(ps -o etime $(ps -u $user | grep sshd | awk 'NR==1 {print $1}') | awk 'NR==2 {print $1}')"
                    info2+="◈──────────────────◈\n"
                    info2+="🟢 $user       $conex/$lim       ⏳$timerr\n"
                }
            done
            echo -e "$info2"
        }
        fun_online >$cad_onli
        [[ $(cat $cad_onli | wc -w) != '0' ]] && {
            while :; do
                ShellBot.sendMessage --chat_id ${callback_query_message_chat_id[$id]} \
                    --text "$(while read line; do echo $line; done < <(sed '1,30!d' $cad_onli))" \
                    --parse_mode html
                sed -i 1,30d $cad_onli
                [[ "$(cat $cad_onli | wc -l)" = '0' ]] && {
                    rm $cad_onli
                    break
                }
            done
        } || {
            ShellBot.answerCallbackQuery --callback_query_id ${callback_query_id[$id]} \
                --text "Nenhum user online" \
                --parse_mode html
            return 0
        }
    elif [[ "$(grep -wc "${callback_query_from_username}" $active)" != '0' ]]; then
        [[ "$(grep -wc ${callback_query_from_username} $suspended)" != '0' ]] && {
            ShellBot.answerCallbackQuery --callback_query_id ${callback_query_id[$id]} \
                --text "⚠️ YOU ARE SUSPENDED! CONTACT THE ADMINISTRATOR"
            return 0
        }
        [[ $(ls /etc/bot/resale/${callback_query_from_username}/users | wc -l) == '0' ]] && {
            ShellBot.answerCallbackQuery --callback_query_id ${callback_query_id[$id]} \
                --text "YOU HASN'T CREATED USER YET!"
            return 0
        }
        datebase="/root/users.db"
        cad_onli=/tmp/$(echo $RANDOM)
        local info_on
        info_on='◈──────────────────◈\n'
        info_on+='<b>ONLINES USERS MONITOR</b>\n'
        info_on+='◈──────────────────◈\n\n'
        info_on+='⚠️ Displays in the format below:\n\n'
        info_on+='<code>ONLINE USER/TIME LIMIT\n</code>'
        ShellBot.sendMessage --chat_id ${callback_query_message_chat_id[$id]} \
            --text "$(echo -e $info_on)" \
            --parse_mode html
        fun_online() {
            local info2
            for user in $(ls /etc/bot/resale/${callback_query_from_username}/users); do
                [[ "$(grep -w $user $datebase)" != "0" ]] && lim="$(grep -w $user $datebase | cut -d' ' -f2)" || lim=0
                [[ $(netstat -nltp | grep 'dropbear' | wc -l) != '0' ]] && drop="$(fun_drop | grep "$user" | wc -l)" || drop=0
                [[ -e /etc/openvpn/openvpn-status.log ]] && ovp="$(cat /etc/openvpn/openvpn-status.log | grep -E ,"$user", | wc -l)" || ovp=0
                sqd="$(ps -u $user | grep sshd | wc -l)"
                conex=$(($sqd + $ovp + $drop))
                [[ $conex -gt '0' ]] && {
                    timerr="$(ps -o etime $(ps -u $user | grep sshd | awk 'NR==1 {print $1}') | awk 'NR==2 {print $1}')"
                    info2+="------------------------------\n"
                    info2+="👤$user       $conex/$lim       ⏳$timerr\n"
                }
            done
            echo -e "$info2"
        }
        fun_online >$cad_onli
        [[ $(cat $cad_onli | wc -w) != '0' ]] && {
            while :; do
                ShellBot.sendMessage --chat_id ${callback_query_message_chat_id[$id]} \
                    --text "<code>$(while read line; do echo $line; done < <(sed '1,30!d' $cad_onli))</code>" \
                    --parse_mode html
                sed -i 1,30d $cad_onli
                [[ "$(cat $cad_onli | wc -l)" = '0' ]] && {
                    rm $cad_onli
                    break
                }
            done
        } || {
            ShellBot.sendMessage --chat_id ${callback_query_message_chat_id[$id]} \
                --text "No users online" \
                --parse_mode html
            return 0
        }
    else
        ShellBot.answerCallbackQuery --callback_query_id ${callback_query_id[$id]} \
            --text "$(echo -e 🚫 ACCESS DENIED 🚫)"
        return 0
    fi
}

fun_verif_user() {
    user=$1
    [[ -z "$user" ]] && {
        ShellBot.sendMessage --chat_id ${message_chat_id[$id]} \
            --text "$(echo -e "Error")" \
            --parse_mode html
        return 0
    }
    [[ "${message_from_id[$id]}" == "$id_admin" ]] && {
        [[ "$(awk -F : '$3 >= 1000 { print $1 }' /etc/passwd | grep -wc $user)" == '0' ]] && {
            ShellBot.sendMessage --chat_id ${message_chat_id[$id]} \
                --text "$(echo -e ❌ THE USER $user DOES NOT EXIST !)" \
                --parse_mode html
            _erro='1'
            return 0
        }
    }
    [[ -d /etc/bot/resale/${message_from_username} ]] && {
        [[ ! -e /etc/bot/resale/${message_from_username}/users/$user ]] && {
            ShellBot.sendMessage --chat_id ${message_chat_id[$id]} \
                --text "$(echo -e ❌ THE USER $user DOES NOT EXIST !)" \
                --parse_mode html
            _erro='1'
            return 0
        }
    }
}

fun_down() {
    [[ "${callback_query_from_id[$id]}" != "$id_admin" ]] && {
        ShellBot.answerCallbackQuery --callback_query_id ${callback_query_id[$id]} \
            --text "🚫 ACCESS DENIED 🚫"
        return 0
    }
    [[ ! -d /tmp/file ]] && mkdir /tmp/file
    ShellBot.sendMessage --chat_id ${callback_query_message_chat_id[$id]} \
        --text "[1] - ADD FILE\n[2] - DELETE FILE\n\nInform the option [1-2]:" \
        --reply_markup "$(ShellBot.ForceReply)"
}

infovps() {
    [[ "${callback_query_from_id[$id]}" != "$id_admin" ]] && {
        ShellBot.sendMessage --chat_id ${callback_query_message_chat_id[$id]} \
            --text "$(echo -e 🚫 ACCESS DENIED 🚫)"
        return 0
    }
    PTs='/tmp/prts'
    _ons=$(ps -x | grep sshd | grep -v root | grep priv | wc -l)
    [[ -e /etc/openvpn/openvpn-status.log ]] && _onop=$(grep -c "10.8.0" /etc/openvpn/openvpn-status.log) || _onop="0"
    [[ -e /etc/default/dropbear ]] && _drp=$(ps aux | grep dropbear | grep -v grep | wc -l) _ondrp=$(($_drp - 1)) || _ondrp="0"
    _on=$(($_ons + $_onop + $_ondrp))
    total=$(awk -F: '$3>=1000 {print $1}' /etc/passwd | grep -v nobody | wc -l)
    system=$(cat /etc/issue.net)
    uso=$(top -bn1 | awk '/Cpu/ { cpu = "" 100 - $8 "%" }; END { print cpu }')
    cpucores=$(grep -c cpu[0-9] /proc/stat)
    ram1=$(free -h | grep -i mem | awk {'print $2'})
    usoram=$(free -m | awk 'NR==2{printf "%.2f%%\t\t", $3*100/$2 }')
    total=$(cat -n /root/users.db | tail -n 1 | awk '{print $1}')
    echo -e "SSH: $(grep 'Port' /etc/ssh/sshd_config | cut -d' ' -f2 | grep -v 'no' | xargs)" >$PTs
    [[ -e "/etc/stunnel/stunnel.conf" ]] && echo -e "SSL Tunel: $(netstat -nplt | grep 'stunnel' | awk {'print $4'} | cut -d: -f2 | xargs)" >>$PTs
    [[ -e "/etc/openvpn/server.conf" ]] && echo -e "Openvpn: $(netstat -nplt | grep 'openvpn' | awk {'print $4'} | cut -d: -f2 | xargs)" >>$PTs
    [[ "$(netstat -nplt | grep 'sslh' | wc -l)" != '0' ]] && echo -e "SSlh: $(netstat -nplt | grep 'sslh' | awk {'print $4'} | cut -d: -f2 | xargs)" >>$PTs
    [[ "$(netstat -nplt | grep 'squid' | wc -l)" != '0' ]] && echo -e "Squid: $(netstat -nplt | grep 'squid' | awk -F ":" {'print $4'} | xargs)" >>$PTs
    [[ "$(netstat -nltp | grep 'dropbear' | wc -l)" != '0' ]] && echo -e "DropBear: $(netstat -nplt | grep 'dropbear' | awk -F ":" {'print $4'} | xargs)" >>$PTs
    [[ "$(netstat -nplt | grep 'python' | wc -l)" != '0' ]] && echo -e "Proxy Socks: $(netstat -nplt | grep 'python' | awk {'print $4'} | cut -d: -f2 | xargs)" >>$PTs
    local info
    info="◈──────────────────◈\n"
    info+="<b>SERVER INFORMATION</b>\n"
    info+="◈──────────────────◈\n\n"
    info+="<b>OPERATING SYSTEM</b>\n"
    info+="$system\n\n"
    info+="<b>PROCESSOR</b>\n"
    info+="<b>cores:</b> $cpucores\n"
    info+="<b>use:</b> $uso\n\n"
    info+="<b>RAM MEMORY</b>\n"
    info+="<b>Total:</b> $ram1\n"
    info+="<b>use:</b> $usoram\n\n"
    while read line; do
        info+="<b>$(echo -e "$line")</b>\n"
    done < <(cat $PTs)
    info+="\n<b>$total</b><i> USERS</i><b> $_on</b> <i>ONLINE</i>"
    ShellBot.sendMessage --chat_id $id_admin \
        --text "$(echo -e $info)" \
        --parse_mode html
    return 0
}

fun_download() {
    Opc=$1
    [[ -z "$Opc" ]] && {
        ShellBot.sendMessage --chat_id ${message_chat_id[$id]} \
            --text "$(echo -e "❌ error try again")"
        _erro='1'
        return 0
    }
    _file2=$2
    [[ -z "$_file2" ]] && {
        ShellBot.sendMessage --chat_id ${message_chat_id[$id]} \
            --text "$(echo -e "❌ error try again")"
        _erro='1'
        return 0
    }
    _DirArq=$(ls /etc/bot/files)
    i=0
    unset _Pass
    while read _Arq; do
        i=$(expr $i + 1)
        _oP=$i
        [[ $i == [1-9] ]] && i=0$i && oP+=" 0$i"
        echo -e "[$i] - $_Arq"
        _Pass+="\n${_oP}:${_Arq}"
    done <<<"${_DirArq}"
    _file=$(echo -e "${_Pass}" | grep -E "\b$Opc\b" | cut -d: -f2)
    echo $_file2
    ShellBot.sendDocument --chat_id ${message_from_id[$id]} \
        --document "@/etc/bot/files/$_file" \
        --caption "$(echo -e "<b>=====================================</b>\n<b>----------♻️ @opiranv2rayproxy ♻️----------</b>\n<b>=====================================</b>\n\n<b>◈─────⪧ IMPORTANT ⪦──────◈</b>\n\n◈⪧ 🚫 NO SPAM\n◈⪧ ⚠️ NO DDOS\n◈⪧ 🎭 NO Hacking\n◈⪧ ⛔️ NO Carding\n◈⪧ 🙅‍♂️ NO Torrent\n◈⪧ ❌ NO MultiLogin\n◈⪧ 🤷‍♂️ NO Illegal Activities\n\n<b>◈─────⪧ SSH ACCOUNT ⪦─────◈</b>\n\n<b>◈ Username    :⪧</b>  <code>$(awk -F " " '/name/ {print $2}' $_file2)</code>\n<b>◈ Password     :⪧</b>  <code>$(awk -F " " '/password/ {print $2}' $_file2)</code>\n<b>◈ Login Limit   :⪧</b> $(awk -F " " '/limit/ {print $2}' $_file2)\n<b>◈ Expire Date  :⪧</b> $(awk -F " " '/validity/ {print $2}' $_file2)\n\n<b>◈──────⪧ PORTS ⪦ ───────◈</b>\n\n◈ SSH            ⌁   22\n◈ SSL             ⌁  443\n◈ Squid         ⌁  8080\n◈ DropBear ⌁  80\n◈ BadVPN    ⌁  7300\n\n<b>◈───⪧ONLINE USER COUNT⪦────◈ </b>\n\nhttp://$(cat /etc/IP):8888/server/online\n\n<b>◈──────────────────◈</b>\n\n<b>©️ ----------♻️ @opiranv2rayproxy ♻️----------</b>\n<b>◈──────────────────◈</b>")" \
        --parse_mode html
    [[ -e "/root/$(awk -F " " '/name/ {print $2}' $_file2).ovpn" ]] && {
        ShellBot.sendDocument --chat_id ${message_from_id[$id]} \
            --document "@/root/$(awk -F " " '/name/ {print $2}' $_file2).ovpn"
    }
}

otimizer() {
    [[ "${callback_query_from_id[$id]}" != "$id_admin" ]] && {
        ShellBot.sendMessage --chat_id ${callback_query_message_chat_id[$id]} \
            --text "$(echo -e 🚫 ACCESS DENIED 🚫)"
        return 0
    }
    MEM1=$(free | awk '/Mem:/ {print int(100*$3/$2)}')
    ShellBot.answerCallbackQuery --callback_query_id ${callback_query_id[$id]} \
        --text "🧹 LEARING SERVER CACHE"
    apt-get autoclean -y
    echo 3 >/proc/sys/vm/drop_caches
    sync && sysctl -w vm.drop_caches=3 1>/dev/null 2>/dev/null
    sysctl -w vm.drop_caches=0 1>/dev/null 2>/dev/null
    swapoff -a
    swapon -a
    ram1=$(free -h | grep -i mem | awk {'print $2'})
    ram2=$(free -h | grep -i mem | awk {'print $3'})
    ram3=$(free -h | grep -i mem | awk {'print $4'})
    MEM2=$(free | awk '/Mem:/ {print int(100*$3/$2)}')
    res=$(expr $MEM1 - $MEM2)
    local sucess
    sucess="◈──────────────────◈\n"
    sucess+="<b>SUCCESSFULLY OPTIMIZED!</b>\n"
    sucess+="◈──────────────────◈\n\n"
    sucess+="<i>Previous use</i> $MEM1%\n\n"
    sucess+="<b>Total Ram Memory</b> $ram1\n"
    sucess+="<b>free</b> $ram3\n"
    sucess+="<b>In use</b> $ram2\n"
    sucess+="<i>current use</i> $MEM2%\n\n"
    sucess+="<b>Saving:</b> $res%"
    ShellBot.sendMessage --chat_id $id_admin \
        --text "$(echo -e $sucess)" \
        --parse_mode html
    return 0
}

speed_test() {
    [[ "${callback_query_from_id[$id]}" != "$id_admin" ]] && {
        ShellBot.sendMessage --chat_id ${callback_query_message_chat_id[$id]} \
            --text "$(echo -e 🚫 ACCESS DENIED 🚫)"
        return 0
    }
    rm -rf $HOME/speed >/dev/null 2>&1
    ShellBot.answerCallbackQuery --callback_query_id ${callback_query_id[$id]} \
        --text "🚀 TESTING SERVER SPEED"
    speedtest --share >speed
    png=$(cat speed | sed -n '5 p' | awk -F : {'print $NF'})
    down=$(cat speed | sed -n '7 p' | awk -F : {'print $NF'})
    upl=$(cat speed | sed -n '9 p' | awk -F : {'print $NF'})
    lnk=$(cat speed | sed -n '10 p' | awk {'print $NF'})
    local msg
    msg="◈──────────────────◈\n"
    msg+="<b>🚀 SERVER SPEED 🚀</b>\n"
    msg+="◈──────────────────◈\n\n"
    msg+="<b>PING/LATENCY:</b>$png\n"
    msg+="<b>DOWNLOAD:</b>$down\n"
    msg+="<b>UPLOAD:</b>$upl\n"
    ShellBot.sendMessage --chat_id $id_admin \
        --text "$(echo -e $msg)" \
        --parse_mode html
    ShellBot.sendMessage --chat_id $id_admin \
        --text "$(echo -e $lnk)" \
        --parse_mode html
    rm -rf $HOME/speed >/dev/null 2>&1
    return 0
}

backup_users() {
    [[ "${callback_query_from_id[$id]}" != "$id_admin" ]] && {
        ShellBot.sendMessage --chat_id ${callback_query_message_chat_id[$id]} \
            --text "$(echo -e 🚫 ACCESS DENIED 🚫)"
        return 0
    }
    rm /root/backup.vps 1>/dev/null 2>/dev/null
    ShellBot.answerCallbackQuery --callback_query_id ${callback_query_id[$id]} \
        --text "♻️ CREATING USER BACKUP"
    tar cvf /root/backup.vps /root/users.db /etc/shadow /etc/passwd /etc/group /etc/gshadow /etc/bot /etc/opiran/password 1>/dev/null 2>/dev/null
    ShellBot.sendDocument --chat_id ${id_admin} \
        --document "@/root/backup.vps" \
        --caption "$(echo -e "♻️ USER BACKUP ♻️")"
    return 0
}

aboutmim() {
    local msg
    msg="◈──────────────────◈\n"
    msg+="<b>🐉 @opiranv2rayproxy 🐉</b>\n"
    msg+="◈──────────────────◈\n\n"
    msg+="<b>Developed by:</b> @@opiranv2rayproxy\n"
    msg+="<b>Official channel:</b> @@opiranv2rayproxy\n\n"
    msg+="I was created with the purpose of providing information and tools for VPN management on 🐧 GNU/Linux 🐧 servers.\n\n"
    msg+="<b>Menu:</b> /menu\n"
    ShellBot.sendMessage --chat_id ${message_chat_id[$id]} \
        --text "$(echo -e $msg)" \
        --parse_mode html
    return 0
}

fun_add_test() {
    if [[ "$(grep -wc ${callback_query_from_username} $suspended)" != '0' ]]; then
        ShellBot.answerCallbackQuery --callback_query_id ${callback_query_id[$id]} \
            --text "⚠️ YOU ARE SUSPENDED! CONTACT THE ADMINISTRATOR"
        return 0
    elif [[ "${callback_query_from_id[$id]}" == "$id_admin" ]]; then
        ShellBot.sendMessage --chat_id ${callback_query_message_chat_id[$id]} \
            --text "👤 CREATE TEST 👤\n\nhow many hours should it last EX: 1:" \
            --reply_markup "$(ShellBot.ForceReply)"
    elif [[ "$(grep -wc ${callback_query_from_username} $active)" != '0' ]]; then
        _limTotal=$(grep -w "${callback_query_from_username}" $active | awk '{print $4}')
        fun_verif_limit_rev ${callback_query_from_username}
        _limsomarev2=$(echo "$_result + 1" | bc)
        [[ "$_limsomarev2" -gt "$_limTotal" ]] && {
            ShellBot.answerCallbackQuery --callback_query_id ${callback_query_id[$id]} \
                --text "❌ You have NO LIMIT AVAILABLE!"
            return 0
        } || {
            ShellBot.sendMessage --chat_id ${callback_query_message_chat_id[$id]} \
                --text "👤 CREATE TEST 👤\n\nhow many hours should it last EX: 1:" \
                --reply_markup "$(ShellBot.ForceReply)"
        }
    else
        ShellBot.answerCallbackQuery --callback_query_id ${callback_query_id[$id]} \
            --text "🚫 ACCESS DENIED 🚫"
        return 0
    fi
}

fun_test() {
    user=$(echo test$((RANDOM % +500)))
    password='1234'
    limit='1'
    t_time=$1
    ex_date=$(date '+%d/%m/%C%y' -d " +2 days")
    tuserdate=$(date '+%C%y/%m/%d' -d " +2 days")
    [[ -z $t_time ]] && {
        ShellBot.sendMessage --chat_id ${message_chat_id[$id]} \
            --text "$(echo -e "❌ error try again")" \
            --parse_mode html
        return 0
        _erro='1'
    }
    useradd -M -N -s /bin/false $user -e $tuserdate >/dev/null 2>&1
    (
        echo "$password"
        echo "$password"
    ) | passwd $user >/dev/null 2>&1
    echo "$password" >/etc/opiran/password/$user
    echo "$user $limit" >>/root/users.db
    [[ "${message_from_id[$id]}" != "$id_admin" ]] && {
        echo "$user:$password:$ex_date:$limit" >/etc/bot/resale/${message_from_username}/users/$user
    }
    dir_test="/etc/bot/resale/${message_from_username}/users/$user"
    cat <<-EOF >/etc/opiran/usertest/$user.sh
	#!/bin/bash
	# user test
	[[ \$(ps -u "$user" | grep -c sshd) != '0' ]] && pkill -u $user
	userdel --force $user
	grep -v ^$user[[:space:]] /root/users.db > /tmp/ph ; cat /tmp/ph > /root/users.db
	[[ -e $dir_test ]] && rm $dir_test
	rm /etc/opiran/password/$user > /dev/null 2>&1
	rm /etc/opiran/usertest/$user.sh
	EOF
    chmod +x /etc/opiran/usertest/$user.sh
    echo "/etc/opiran/usertest/$user.sh" | at now + $t_time hour >/dev/null 2>&1
    [[ "$t_time" == '1' ]] && hrs="hour" || hrs="hours"
    [[ "$(ls /etc/bot/files | wc -l)" != '0' ]] && {
        for arqv in $(ls /etc/bot/files); do
            ShellBot.sendDocument --chat_id ${message_from_id[$id]} \
                --document "@/etc/bot/files/$arqv" \
                --caption "$(echo -e "<b>====================================</b>\n<b>----------♻️ @opiranv2rayproxy ♻️----------</b>\n<b>====================================</b>\n\n<b>◈─────⪧ IMPORTANT ⪦──────◈</b>\n\n◈⪧ 🚫 NO SPAM\n◈⪧ ⚠️ NO DDOS\n◈⪧ 🎭 NO Hacking\n◈⪧ ⛔️ NO Carding\n◈⪧ 🙅‍♂️ NO Torrent\n◈⪧ ❌ NO MultiLogin\n◈⪧ 🤷‍♂️ NO Illegal Activities\n\n<b>◈─────⪧TEST SSH ACCOUNT ⪦─────◈</b>\n\n<b>◈ Username    :⪧</b>  <code>$user</code>\n<b>◈ Password     :⪧</b> <code>1234</code>\n<b>◈ Expire at  :⪧</b> $t_time $hrs / Hours \n\n<b>◈──────⪧ PORTS ⪦ ───────◈</b>\n\n◈ SSH            ⌁   22\n◈ SSL             ⌁  443\n◈ Squid         ⌁  8080\n◈ DropBear ⌁  80\n◈ BadVPN    ⌁  7300\n\n<b>◈───⪧ONLINE USER COUNT⪦────◈ </b>\n\nhttp://$(cat /etc/IP):8888/server/online\n\n<b>◈──────────────────◈</b>\n\n<b>©️ ----------♻️ @opiranv2rayproxy ♻️----------</b>\n<b>◈──────────────────◈</b>")" \
                --parse_mode html
        done
        return 0
    } || {
        ShellBot.sendMessage --chat_id ${message_chat_id[$id]} \
            --text "$(echo -e "<b>====================================</b>\n<b>----------♻️ @opiranv2rayproxy ♻️----------</b>\n<b>====================================</b>\n\n<b>◈─────⪧ IMPORTANT ⪦──────◈</b>\n\n◈⪧ 🚫 NO SPAM\n◈⪧ ⚠️ NO DDOS\n◈⪧ 🎭 NO Hacking\n◈⪧ ⛔️ NO Carding\n◈⪧ 🙅‍♂️ NO Torrent\n◈⪧ ❌ NO MultiLogin\n◈⪧ 🤷‍♂️ NO Illegal Activities\n\n<b>◈────⪧TEST SSH ACCOUNT ⪦────◈</b>\n\n<b>◈ Host / IP       :⪧</b>  <code>$(cat /etc/IP)</code>\n<b>◈ Username    :⪧</b>  <code>$user</code>\n<b>◈ Password     :⪧</b> <code>1234</code>\n<b>◈ Expire at       :⪧</b> $t_time $hrs / Hours \n\n<b>◈──────⪧ PORTS ⪦ ───────◈</b>\n\n◈ SSH            ⌁   22\n◈ SSL             ⌁  443\n◈ Squid         ⌁  8080\n◈ DropBear ⌁  80\n◈ BadVPN    ⌁  7300\n\n<b>◈───⪧ONLINE USER COUNT⪦────◈ </b>\n\nhttp://$(cat /etc/IP):8888/server/online\n\n<b>◈──────────────────◈</b>\n\n<b>©️ ----------♻️ @opiranv2rayproxy ♻️----------</b>\n<b>◈──────────────────◈</b>")" \
            --parse_mode html
        return 0
    }
}

fun_exp_user() {
    if [[ "${callback_query_from_id[$id]}" == "$id_admin" ]]; then
        [[ $(cat /root/users.db | wc -l) == '0' ]] && {
            ShellBot.answerCallbackQuery --callback_query_id ${callback_query_id[$id]} \
                --text "YOU HASN'T CREATED USER YET!"
            return 0
        }
        datenow=$(date +%s)
        for user in $(cat /etc/passwd | awk -F : '$3 >= 1000 {print $1}' | grep -v nobody); do
            expdate=$(chage -l $user | awk -F: '/Account expires/{print $2}')
            echo $expdate | grep -q never && continue
            datenormal=$(date -d"$expdate" '+%d/%m/%Y')
            expsec=$(date +%s --date="$expdate")
            diff=$(echo $datenow - $expsec | bc -l)
            echo $diff | grep -q ^\- && continue
            pkill -u $user
            userdel --force $user
            grep -v ^$user[[:space:]] /root/users.db >/tmp/ph
            cat /tmp/ph >/root/users.db
            [[ -e /etc/bot/info-users/$user ]] && rm /etc/bot/info-users/$user
            [[ -e /etc/opiran/usertest/$user.sh ]] && rm /etc/opiran/usertest/$user.sh
            [[ "$(ls /etc/bot/resale)" != '0' ]] && {
                for ex in $(ls /etc/bot/resale); do
                    [[ -e /etc/bot/resale/$exp/users/$user ]] && rm /etc/bot/resale/$ex/users/$user
                done
            }
        done
        ShellBot.answerCallbackQuery --callback_query_id ${callback_query_id[$id]} \
            --text "⌛️ EXPIRED SSH USERS REMOVED"
        return 0
    elif [[ "$(grep -wc "${callback_query_from_username}" $active)" != '0' ]]; then
        [[ "$(grep -wc ${callback_query_from_username} $suspended)" != '0' ]] && {
            ShellBot.answerCallbackQuery --callback_query_id ${callback_query_id[$id]} \
                --text "⚠️ YOU ARE SUSPENDED! CONTACT THE ADMINISTRATOR"
            return 0
        }
        [[ $(ls /etc/bot/resale/${callback_query_from_username}/users | wc -l) == '0' ]] && {
            ShellBot.answerCallbackQuery --callback_query_id ${callback_query_id[$id]} \
                --text "YOU HASN'T CREATED USER YET!"
            return 0
        }
        datenow=$(date +%s)
        dir_user="/etc/bot/resale/${callback_query_from_username}/users"
        for user in $(ls $dir_user); do
            expdate=$(chage -l $user | awk -F: '/Account expires/{print $2}')
            echo $expdate | grep -q never && continue
            datenormal=$(date -d"$expdate" '+%d/%m/%Y')
            expsec=$(date +%s --date="$expdate")
            diff=$(echo $datenow - $expsec | bc -l)
            echo $diff | grep -q ^\- && continue
            pkill -f $user
            userdel --force $user
            grep -v ^$user[[:space:]] /root/users.db >/tmp/ph
            cat /tmp/ph >/root/users.db
            [[ -e /etc/opiran/usertest/$user.sh ]] && rm /etc/opiran/usertest/$user.sh
            [[ -e "$dir_user/$user" ]] && rm $dir_user/$user
        done
        ShellBot.answerCallbackQuery --callback_query_id ${callback_query_id[$id]} \
            --text "⌛️ EXPIRED SSH USERS REMOVED"
        return 0
    else
        ShellBot.answerCallbackQuery --callback_query_id ${callback_query_id[$id]} \
            --text "$(echo -e 🚫 ACCESS DENIED 🚫)"
        return 0
    fi
}

report_rev() {
    if [[ "${callback_query_from_id[$id]}" = "$id_admin" ]]; then
        _ons=$(ps -x | grep sshd | grep -v root | grep priv | wc -l)
        _tuser=$(awk -F: '$3>=1000 {print $1}' /etc/passwd | grep -v nobody | wc -l)
        [[ -e /etc/openvpn/openvpn-status.log ]] && _onop=$(grep -c "10.8.0" /etc/openvpn/openvpn-status.log) || _onop="0"
        [[ -e /etc/default/dropbear ]] && _drp=$(ps aux | grep dropbear | grep -v grep | wc -l) _ondrp=$(($_drp - 1)) || _ondrp="0"
        _onli=$(($_ons + $_onop + $_ondrp))
        _cont_rev=$(echo $(grep -wc resale $active) - $(grep -wc resale $suspended) | bc)
        _cont_sus=$(grep -wc resale $suspended)
        _cont_sub=$(grep -wc subresale $active)
        _cont_revt=$(grep -wc resale $active)
        local msg
        msg="◈──────────────────◈\n"
        msg+="<b>📊 REPORT | INFORMATION</b>\n"
        msg+="◈──────────────────◈\n\n"
        msg+="<b>Total users:</b> $_tuser\n"
        msg+="<b>Online users:</b> $_onli\n"
        msg+="<b>Active Resellers:</b> $_cont_rev\n"
        msg+="<b>Suspended Resellers:</b> $_cont_sus\n"
        msg+="<b>Sub-Resales:</b> $_cont_sub\n\n"
        msg+="<b>Username:</b> @${callback_query_from_username}\n"
        msg+="<b>ID:</b> <code>${callback_query_from_id}</code>\n"
        [[ $_cont_revt != '0' ]] && {
            ShellBot.answerCallbackQuery --callback_query_id ${callback_query_id[$id]} \
                --text "📊 CREATING REPORT!"
        } || {
            ShellBot.answerCallbackQuery --callback_query_id ${callback_query_id[$id]} \
                --text "⚠️ NO DEALER FOUND !"
            return 0
        }
        echo -e "RETAILER'S REPORT\n\nTotal: $_cont_revt  -  $(printf 'date: %(%d/%m/%Y)T\n')\n◈──────────────────◈" >/tmp/report.txt
        while read _revlist; do
            _name_rev="$(echo $_revlist | awk '{print $2}')"
            _limit_rev="$(echo $_revlist | awk '{print $4}')"
            _date_rev="$(echo $_revlist | awk '{print $6}')"
            [[ -e "/etc/bot/resale/$_name_rev/$_name_rev" ]] && {
                _dirsts='resale'
                _status='Active'
            } || {
                _dirsts='suspended'
                _status='Suspended'
            }
            _subrev="$(grep -wc SUBresale /etc/bot/$_dirsts/$_name_rev/$_name_rev)"
            fun_on() {
                for user in $(ls /etc/bot/$_dirsts/$_name_rev/users); do
                    [[ $(netstat -nltp | grep 'dropbear' | wc -l) != '0' ]] && drop="$(fun_drop | grep "$user" | wc -l)" || drop=0
                    [[ -e /etc/openvpn/openvpn-status.log ]] && ovp="$(cat /etc/openvpn/openvpn-status.log | grep -E ,"$user", | wc -l)" || ovp=0
                    sqd="$(ps -u $user | grep sshd | wc -l)"
                    conex=$(($sqd + $ovp + $drop))
                    echo -e "$conex"
                done
            }
            [[ "$(ls /etc/bot/$_dirsts/$_name_rev/users | wc -l)" != '0' ]] && {
                total_on=$(fun_on | paste -s -d + | bc)
                total_users=$(ls /etc/bot/$_dirsts/$_name_rev/users | wc -l)
            } || {
                total_on='0'
                total_users='0'
            }
            echo -e "\nSTATUS: $_status\nDEALER: @$_name_rev\nLIMIT: $_limit_rev\nDAYS REMAINING: $_date_rev\nSSH CREATED: $total_users\nSSH ONLINE: $total_on\nSUB-RESALE: $_subrev\n\n◈──────────────────◈" >>/tmp/report.txt
        done <<<"$(grep -w 'resale' $active)"
        ShellBot.sendDocument --chat_id $id_admin \
            --document "@/tmp/report.txt" \
            --caption "$(echo -e "$msg")" \
            --parse_mode html
        return 0
    elif [[ "$(grep -wc ${callback_query_from_username} $active)" != '0' ]]; then
        [[ "$(grep -wc ${callback_query_from_username} $suspended)" != '0' ]] && {
            ShellBot.answerCallbackQuery --callback_query_id ${callback_query_id[$id]} \
                --text "⚠️ YOU ARE SUSPENDED! CONTACT THE ADMINISTRATOR"
            return 0
        }
        [[ $(grep -wc 'SUBresale' /etc/bot/resale/${callback_query_from_username}/${callback_query_from_username}) == '0' ]] && {
            ShellBot.answerCallbackQuery --callback_query_id ${callback_query_id[$id]} \
                --text "⚠️ NO SUB DEALER FOUND !"
            _cont_limit=$(grep -w ${callback_query_from_username} $active | awk '{print $4}')
            fun_verif_limit_rev ${callback_query_from_username}
            _cont_disp=$(echo $_cont_limit - $_result | bc)
            local msg
            msg="◈──────────────────◈\n"
            msg+="<b>📊 REPORT | INFORMATION</b>\n"
            msg+="◈──────────────────◈\n\n"
            msg+="<b>Login Limit:</b> $_cont_limit\n"
            msg+="<b>Available Limit:</b> $_cont_disp\n"
            ShellBot.sendMessage --chat_id ${callback_query_message_chat_id[$id]} \
                --text "$msg" \
                --parse_mode html
            return 0
        }
        fun_contsub() {
            while read _sublist; do
                _usub="$(echo $_sublist | awk '{print $2}')"
                echo $(grep -wc $_usub $suspended)
            done <<<"$(grep -w 'SUBresale' /etc/bot/resale/${callback_query_from_username}/${callback_query_from_username})"
        }
        _cont_limit=$(grep -w ${callback_query_from_username} $active | awk '{print $4}')
        fun_verif_limit_rev ${callback_query_from_username}
        _cont_disp=$(echo $_cont_limit - $_result | bc)
        _cont_atv=$(grep -wc SUBresale /etc/bot/resale/${callback_query_from_username}/${callback_query_from_username})
        _cont_sup=$(fun_contsub | paste -s -d + | bc)
        local msg
        msg="◈──────────────────◈\n"
        msg+="<b>📊 REPORT | INFORMATION</b>\n"
        msg+="◈──────────────────◈\n\n"
        msg+="<b>Login Limit:</b> $_cont_limit\n"
        msg+="<b>Available Limit:</b> $_cont_disp\n"
        msg+="<b>Total Sub-Resales:</b> $_cont_atv\n"
        msg+="<b>Suspended Sub-Resales:</b> $_cont_sup\n"
        msg+="<b>Username:</b> @${callback_query_from_username}\n"
        msg+="<b>ID:</b> <code>${callback_query_from_id}</code>\n"
        echo -e "LIST OF SUB-SELLERS\n\nTotal: $_cont_atv  -  $(printf 'date: %(%d/%m/%Y)T\n')\n◈──────────────────◈" >/tmp/report-${callback_query_from_username}.txt
        while read _sublist; do
            _usub="$(echo $_sublist | awk '{print $2}')"
            _limit_sub=$(echo $_sublist | awk '{print $4}')
            _date_sub=$(grep -w $_usub $active | awk '{print $6}')
            [[ -e "/etc/bot/resale/$_usub/$_usub" ]] && {
                _dirsts='resale'
                _status='Active'
            } || {
                _dirsts='suspended'
                _status='Suspended'
            }
            fun_subon() {
                for user in $(ls /etc/bot/$_dirsts/$_usub/users); do
                    [[ $(netstat -nltp | grep 'dropbear' | wc -l) != '0' ]] && drop="$(fun_drop | grep "$user" | wc -l)" || drop=0
                    [[ -e /etc/openvpn/openvpn-status.log ]] && ovp="$(cat /etc/openvpn/openvpn-status.log | grep -E ,"$user", | wc -l)" || ovp=0
                    sqd="$(ps -u $user | grep sshd | wc -l)"
                    conex=$(($sqd + $ovp + $drop))
                    echo -e "$conex"
                done
            }
            [[ "$(ls /etc/bot/$_dirsts/$_usub/users | wc -l)" != '0' ]] && {
                total_on=$(fun_on | paste -s -d + | bc)
                total_users=$(ls /etc/bot/$_dirsts/$_usub/users | wc -l)
            } || {
                total_on='0'
                total_users='0'
            }
            echo -e "\nSTATUS: $_status\nSUB-DEALER: @$_usub\nLIMIT: $_limit_sub\nDAYS REMAINING: $_date_sub\nSSH CREATED: $total_users\nSSH ONLINE: $total_on\n\n◈──────────────────◈" >>/tmp/report-${callback_query_from_username}.txt
        done <<<"$(grep -w 'SUBresale' /etc/bot/resale/${callback_query_from_username}/${callback_query_from_username})"
        ShellBot.sendDocument --chat_id ${callback_query_message_chat_id[$id]} \
            --document "@/tmp/report-${callback_query_from_username}.txt" \
            --caption "$(echo -e "$msg")" \
            --parse_mode html
        return 0
    else

        ShellBot.answerCallbackQuery --callback_query_id ${callback_query_id[$id]} \
            --text "🚫 ACCESS DENIED 🚫"
        return 0
    fi
}

fun_backauto() {
    [[ "${callback_query_from_id[$id]}" = "$id_admin" ]] && {
        [[ ! -d /etc/opiran/backups ]] && {
            mkdir /etc/opiran/backups
            [[ $(crontab -l | grep -c "userbackup") = '0' ]] && (
                crontab -l 2>/dev/null
                echo "0 */6 * * * /bin/userbackup 1"
            ) | crontab -
            s
            ShellBot.answerCallbackQuery --callback_query_id ${callback_query_id[$id]} \
                --text "♻️ AUTOMATIC BACKUP ENABLED 🟢"
            return 0
        } || {
            [[ $(crontab -l | grep -c "userbackup") != '0' ]] && crontab -l | grep -v 'userbackup' | crontab -
            [[ -d /etc/opiran/backups ]] && rm -rf /etc/opiran/backups
            ShellBot.answerCallbackQuery --callback_query_id ${callback_query_id[$id]} \
                --text "♻️ AUTOMATIC BACKUP DISABLED 🔴"
            return 0
        }
    }
}

backup_auto() {
    ShellBot.sendDocument --chat_id $id_admin \
        --document "@/etc/opiran/backups/backup.vps" \
        --caption "$(echo -e "♻️ AUTOMATIC BACKUP ♻️")"
    rm /etc/opiran/backups/backup.vps
    return 0
}

restaure_backup() {
    [[ ${message_from_id[$id]} == ${id_admin} ]] && {
        [[ "${message_document_file_name}" != 'backup.vps' ]] && return 0
        local file_id
        file_id=${message_document_file_id[$id]}
        if [[ $file_id ]]; then
            [[ -e /tmp/backup.vps ]] && rm /tmp/backup.vps
            [[ "$(ls /tmp | grep -c '.vps')" != '0' ]] && {
                for i in $(ls /tmp | grep '.vps'); do
                    rm /tmp/$i
                done
            }
            ShellBot.getFile --file_id $file_id
            if ShellBot.downloadFile --file_path "${return[file_path]}" --dir "/tmp"; then
                msg='<b>♻️ BACKUP FILE ♻️</b>\n\n<i>The uploaded file is a file\nuser backup!</i>'
                ShellBot.sendMessage --chat_id ${id_admin} \
                    --text "$(echo -e "$msg")" \
                    --parse_mode html
                ShellBot.sendMessage --chat_id ${id_admin} \
                    --text 'Do you want to restore? [Yes | No]' \
                    --reply_markup "$(ShellBot.ForceReply)"
            fi
        fi
        return 0
    }
}
msg_good_coming() {
    local msg
    msg="👋 Hello ${message_from_first_name[$id]} ! \n\n🤝 Welcome to\n"
    msg+="<b>====================================</b>\n<b>----------♻️ @opiranv2rayproxy ♻️----------</b>\n<b>====================================</b>\n\n"
    msg+="<b>To access the menu</b>\n<b>click [ /menu ]</b>\n\n"
    msg+="<b>For information</b>\n<b>click [ /help ]</b>\n\n ✅ All Tutorials , Updates : @@opiranv2rayproxy"
    ShellBot.sendMessage --chat_id ${message_chat_id[$id]} \
        --text "$(echo -e $msg)" \
        --parse_mode html
    ShellBot.sendSticker --chat_id ${message_chat_id[$id]} \
        --sticker "CAACAgIAAxkBAAEDZt1hqPwEyUPLlqUVp27340hwwsO8OAACugADMNSdEYTXxIjEUGdWIgQ"
    return 0
}

fun_verif_limit_rev() {
    _userrev=$1
    [[ "$(grep -w "$_userrev" $active | awk '{print $NF}')" == 'resale' ]] && {
        echo $_userrev
        [[ $(grep -wc 'SUBresale' /etc/bot/resale/$_userrev/$_userrev) != '0' ]] && {
            _limsomarev=$(grep -w 'SUBresale' /etc/bot/resale/$_userrev/$_userrev | awk {'print $4'} | paste -s -d + | bc)
        } || {
            _limsomarev='0'
        }
        [[ $(ls /etc/bot/resale/$_userrev/users | wc -l) != '0' ]] && {
            _mlim1='0'
            _meus_users="/etc/bot/resale/$_userrev/users"
            for _user_ in $(ls $_meus_users); do
                _mlim2=$(cat $_meus_users/$_user_ | awk -F : {'print $4'})
                _mlim1=$(echo "${_mlim1} + ${_mlim2}" | bc)
            done
        }
        [[ -z "$_mlim1" ]] && _mlim1='0'
        _result=$(echo "${_limsomarev} + ${_mlim1}" | bc)
    }
    [[ "$(grep -w "$_userrev" $active | awk '{print $NF}')" == 'subresale' ]] && {
        [[ "$(ls /etc/bot/resale/$_userrev/users | wc -l)" != '0' ]] && {
            _dir_users="/etc/bot/resale/$_userrev/users"
            _lim1='0'
            for i in $(ls $_dir_users); do
                _lim2=$(cat $_dir_users/$i | awk -F : {'print $4'})
                _lim1=$(echo "${_lim1} + ${_lim2}" | bc)
            done
        }
        [[ -z "$_lim1" ]] && _lim1='0'
        _result=$(echo "${_lim1}")
    }
}

fun_add_resale() {
    [[ "$(grep -wc ${callback_query_from_username} $suspended)" != '0' ]] && {
        ShellBot.answerCallbackQuery --callback_query_id ${callback_query_id[$id]} \
            --text "⚠️ YOU ARE SUSPENDED! CONTACT THE ADMINISTRATOR"
        return 0
    }
    [[ "${callback_query_from_id[$id]}" == "$id_admin" ]] || [[ "$(grep -wc ${callback_query_from_username} $active)" != '0' ]] && {
        ShellBot.sendMessage --chat_id ${callback_query_message_chat_id[$id]} \
            --text "👥 ADD DEALER 👥\n\nEnter the name:" \
            --reply_markup "$(ShellBot.ForceReply)"
    } || {
        ShellBot.answerCallbackQuery --callback_query_id ${callback_query_id[$id]} \
            --text "🚫 ACCESS DENIED 🚫"
        return 0
    }
}

create_rev() {
    file_rev=$1
    [[ -z "$file_rev" ]] && {
        ShellBot.sendMessage --chat_id ${message_chat_id[$id]} \
            --text "$(echo -e Erro)"
        _erro='1'
        break
    }
    n_rev=$(sed -n '1 p' $file_rev | cut -d' ' -f2)
    u_rev=$(sed -n '2 p' $file_rev | awk -F '@' {'print $2'})
    l_rev=$(sed -n '3 p' $file_rev | cut -d' ' -f2)
    d_rev=$(sed -n '4 p' $file_rev | cut -d' ' -f2)
    [[ "${message_from_id[$id]}" = "$id_admin" ]] && {
        t_rev='resale'
    } || {
        t_rev='subresale'
        echo -e "SUBRESALE: $u_rev LIMIT_SUBRESALE: $l_rev" >>/etc/bot/resale/${message_from_username}/${message_from_username}
    }
    mkdir /etc/bot/resale/"$u_rev"
    mkdir /etc/bot/resale/"$u_rev"/users
    touch /etc/bot/resale/"$u_rev"/$u_rev
    echo -e "USER: $u_rev limit: $l_rev DAYS: $d_rev TIPO: $t_rev" >>$active
    echo -e "◈──────────────────◈\nLIMIT_RESALE: $l_rev\nDAYS_RESALE: $d_rev\n◈──────────────────◈\n" >/etc/bot/resale/"$u_rev"/$u_rev
    sed -i '$d' $file_rev
    echo -e "Due date: $(date "+%d/%m/%Y" -d "+$d_rev days")" >>$file_rev
}

fun_del_rev() {
    [[ "$(grep -wc ${callback_query_from_username} $suspended)" != '0' ]] && {
        ShellBot.answerCallbackQuery --callback_query_id ${callback_query_id[$id]} \
            --text "⚠️ YOU ARE SUSPENDED! CONTACT THE ADMINISTRATOR"
        return 0
    }
    [[ "${callback_query_from_id[$id]}" == "$id_admin" ]] || [[ "$(grep -wc ${callback_query_from_username} $active)" != '0' ]] && {
        ShellBot.sendMessage --chat_id ${callback_query_message_chat_id[$id]} \
            --text "🗑 REMOVE DEALER 🗑\n\nInform his username [Ex: @@opiranv2rayproxy]:" \
            --reply_markup "$(ShellBot.ForceReply)"
    } || {
        ShellBot.answerCallbackQuery --callback_query_id ${callback_query_id[$id]} \
            --text "🚫 ACCESS DENIED 🚫"
        return 0
    }
}

del_rev() {
    _cli_rev=$1
    [[ -z "$_cli_rev" ]] && {
        ShellBot.sendMessage --chat_id ${message_chat_id[$id]} \
            --text "$(echo -e "Erro")"
        return 0
    }
    [[ "${message_from_id[$id]}" == "$id_admin" ]] && {
        [[ "$(grep -wc "$_cli_rev" $active)" != '0' ]] && {
            [[ -e "/etc/bot/resale/$_cli_rev/$_cli_rev" ]] && _dirsts='resale' || _dirsts='suspended'
            [[ "$(grep -wc 'SUBresale' /etc/bot/$_dirsts/$_cli_rev/$_cli_rev)" != '0' ]] && {
                while read _listsub2; do
                    _usub="$(echo $_listsub2 | awk '{print $2}')"
                    [[ -e "/etc/bot/resale/$_usub/$_usub" ]] && _dirsts2='resale' || _dirsts2='suspended'
                    _dir_users="/etc/bot/$_dirsts2/$_usub/users"
                    [[ "$(ls $_dir_users | wc -l)" != '0' ]] && {
                        for _user in $(ls $_dir_users); do
                            piduser=$(ps -u "$_user" | grep sshd | cut -d? -f1)
                            kill -9 $piduser >/dev/null 2>&1
                            userdel --force "$_user" 2>/dev/null
                            grep -v ^$_user[[:space:]] /root/users.db >/tmp/ph
                            cat /tmp/ph >/root/users.db
                            rm /etc/bot/info-users/$_user
                        done
                    }
                    [[ -d /etc/bot/$_dirsts2/$_usub ]] && rm -rf /etc/bot/$_dirsts2/$_usub >/dev/null 2>&1
                    sed -i "/\b$_usub\b/d" $active
                    [[ $(grep -wc "$_usub" $suspended) != '0' ]] && {
                        sed -i "/\b$_usub\b/d" $suspended
                    }
                done <<<"$(grep -w 'SUBresale' /etc/bot/$_dirsts/$_cli_rev/$_cli_rev)"
            }
            [[ "$(ls /etc/bot/$_dirsts/$_cli_rev/users | wc -l)" != '0' ]] && {
                for _user in $(ls /etc/bot/$_dirsts/$_cli_rev/users); do
                    piduser=$(ps -u "$_user" | grep sshd | cut -d? -f1)
                    kill -9 $piduser >/dev/null 2>&1
                    userdel --force "$_user" 2>/dev/null
                    grep -v ^$_user[[:space:]] /root/users.db >/tmp/ph
                    cat /tmp/ph >/root/users.db
                    rm /etc/bot/info-users/$_user
                done
            }
            [[ -d /etc/bot/$_dirsts/$_cli_rev ]] && rm -rf /etc/bot/$_dirsts/$_cli_rev >/dev/null 2>&1
            sed -i "/\b$_cli_rev\b/d" $active
            [[ $(grep -wc "$_cli_rev" $suspended) != '0' ]] && {
                sed -i "/\b$_cli_rev\b/d" $suspended
            }
            ShellBot.sendMessage --chat_id ${message_chat_id[$id]} \
                --text "$(echo -e "SUCCESSFULLY REMOVED")" \
                --parse_mode html
            return 0
        } || {
            ShellBot.sendMessage --chat_id ${message_chat_id[$id]} \
                --text "$(echo -e ❌ DEALER DOES NOT EXIST ❌)"
            return 0
        }
    } || {
        [[ "$(grep -wc "$_cli_rev" /etc/bot/resale/${message_from_username}/${message_from_username})" != '0' ]] && {
            [[ -d /etc/bot/resale/$_cli_rev ]] && {
                [[ "$(ls /etc/bot/resale/$_cli_rev/users | wc -l)" != '0' ]] && {
                    for _user in $(ls /etc/bot/resale/$_cli_rev/users); do
                        piduser=$(ps -u "$_user" | grep sshd | cut -d? -f1)
                        kill -9 $piduser >/dev/null 2>&1
                        userdel --force "$_user" 2>/dev/null
                        grep -v ^$_user[[:space:]] /root/users.db >/tmp/ph
                        cat /tmp/ph >/root/users.db
                        rm /etc/bot/info-users/$_user
                    done
                }
                [[ -d /etc/bot/resale/$_cli_rev ]] && rm -rf /etc/bot/resale/$_cli_rev >/dev/null 2>&1
                sed -i "/\b$_cli_rev\b/d" $active
                sed -i "/\b$_cli_rev\b/d" /etc/bot/resale/${message_from_username}/${message_from_username}
            }
            [[ -d /etc/bot/suspended/$_cli_rev ]] && {
                [[ "$(ls /etc/bot/suspended/$_cli_rev/users | wc -l)" != '0' ]] && {
                    for _user in $(ls /etc/bot/suspended/$_cli_rev/users); do
                        piduser=$(ps -u "$_user" | grep sshd | cut -d? -f1)
                        kill -9 $piduser >/dev/null 2>&1
                        userdel --force "$_user" 2>/dev/null
                        grep -v ^$_user[[:space:]] /root/users.db >/tmp/ph
                        cat /tmp/ph >/root/users.db
                        rm /etc/bot/info-users/$_user
                    done
                }
                [[ -d /etc/bot/suspended/$_cli_rev ]] && rm -rf /etc/bot/suspended/$_cli_rev >/dev/null 2>&1
                sed -i "/\b$_cli_rev\b/d" $active
                sed -i "/\b$_cli_rev\b/d" $suspended
                sed -i "/\b$_cli_rev\b/d" /etc/bot/resale/${message_from_username}/${message_from_username}
            }
            ShellBot.sendMessage --chat_id ${message_chat_id[$id]} \
                --text "$(echo -e "SUCCESSFULLY REMOVED")" \
                --parse_mode html
            return 0
        } || {
            ShellBot.sendMessage --chat_id ${message_chat_id[$id]} \
                --text "$(echo -e ❌ DEALER DOES NOT EXIST ❌)"
            return 0
        }
    }
}

fun_lim_rev() {
    [[ "$(grep -wc ${callback_query_from_username} $suspended)" != '0' ]] && {
        ShellBot.answerCallbackQuery --callback_query_id ${callback_query_id[$id]} \
            --text "⚠️ YOU ARE SUSPENDED! CONTACT THE ADMINISTRATOR"
        return 0
    }
    [[ "${callback_query_from_id[$id]}" == "$id_admin" ]] || [[ "$(grep -wc ${callback_query_from_username} $active)" != '0' ]] && {
        ShellBot.sendMessage --chat_id ${callback_query_message_chat_id[$id]} \
            --text "♾ CHANGE RESALE LIMIT ♾\n\nInform his username [Ex: @@opiranv2rayproxy]:" \
            --reply_markup "$(ShellBot.ForceReply)"
    } || {
        ShellBot.answerCallbackQuery --callback_query_id ${callback_query_id[$id]} \
            --text "🚫 ACCESS DENIED 🚫"
        return 0
    }
}

lim_rev() {
    _file_lim=$1
    [[ -z "$_file_lim" ]] && {
        ShellBot.sendMessage --chat_id ${message_chat_id[$id]} \
            --text "$(echo -e "Erro")"
        return 0
    }
    _rev_usern=$(grep -w 'Revendedor' $_file_lim | awk -F '@' {'print $2'})
    new_l=$(grep -w 'limit' $_file_lim | awk {'print $2'})
    [[ -d /etc/bot/resale/$_rev_usern ]] && {
        l_old=$(grep -w 'limit_resale' /etc/bot/resale/$_rev_usern/$_rev_usern | awk {'print $2'})
        sed -i "/limit_resale/ s/$l_old/$new_l/g" /etc/bot/resale/$_rev_usern/$_rev_usern
        sed -i "/$_rev_usern/ s/limit: $l_old/limit: $new_l/" $active
        [[ "${message_from_id[$id]}" != "$id_admin" ]] && {
            sed -i "/\b$_rev_usern\b/ s/$l_old/$new_l/g" /etc/bot/resale/${message_from_username}/${message_from_username}
        }
        echo $_rev_usern
    } || {
        l_old=$(grep -w 'limit_resale' /etc/bot/suspended/$_rev_usern/$_rev_usern | awk {'print $2'})
        sed -i "/limit_resale/ s/$l_old/$new_l/g" /etc/bot/suspended/$_rev_usern/$_rev_usern
        sed -i "/\b$_rev_usern\b/ s/limit: $l_old/limit: $new_l/" $active
        sed -i "/\b$_rev_usern\b/ s/limit: $l_old/limit: $new_l/" $suspended
        [[ "${message_from_id[$id]}" != "$id_admin" ]] && {
            sed -i "/\b$_rev_usern\b/ s/$l_old/$new_l/" /etc/bot/resale/${message_from_username}/${message_from_username}
        }
        echo $_rev_usern
    }
}

fun_dat_rev() {
    [[ "$(grep -wc ${callback_query_from_username} $suspended)" != '0' ]] && {
        ShellBot.answerCallbackQuery --callback_query_id ${callback_query_id[$id]} \
            --text "⚠️ YOU ARE SUSPENDED! CONTACT THE ADMINISTRATOR"
        return 0
    }
    [[ "${callback_query_from_id[$id]}" == "$id_admin" ]] || [[ "$(grep -wc ${callback_query_from_username} $active)" != '0' ]] && {
        ShellBot.sendMessage --chat_id ${callback_query_message_chat_id[$id]} \
            --text "📆 CHANGE RESALE DATE 📆\n\nInform his username [Ex: @@opiranv2rayproxy]:" \
            --reply_markup "$(ShellBot.ForceReply)"
    } || {
        ShellBot.answerCallbackQuery --callback_query_id ${callback_query_id[$id]} \
            --text "🚫 ACCESS DENIED 🚫"
        return 0
    }
}

dat_rev() {
    _datfile=$1
    [[ -z "$_datfile" ]] && {
        ShellBot.sendMessage --chat_id ${message_chat_id[$id]} \
            --text "$(echo -e "Error")"
        _erro='1'
        return 0
    }
    _revd=$(grep -w 'Revendedor' $_datfile | cut -d'@' -f2)
    new_d=$(grep -w 'date' $_datfile | awk '{print $NF}')
    [[ -d "/etc/bot/suspended/$_revd" ]] && {
        [[ "$(ls /etc/bot/suspended/$_revd/users | wc -l)" != '0' ]] && {
            for _user in $(ls /etc/bot/suspended/$_revd/users); do
                usermod -U $_user
            done
        }
        d_old=$(grep -w 'DAYS_resale' /etc/bot/suspended/$_revd/$_revd | awk {'print $2'})
        sed -i "/\b$_revd\b/ s/DAYS: $d_old/DAYS: $new_d/" $active
        sed -i "/DAYS_resale/ s/$d_old/$new_d/" /etc/bot/suspended/$_revd/$_revd
        [[ "$(grep -wc 'SUBresale' /etc/bot/suspended/$_revd/$_revd)" != '0' ]] && {
            while read _listsub; do
                _usub="$(echo $_listsub | awk '{print $2}')"
                [[ "$(ls /etc/bot/suspended/$_usub/users | wc -l)" != '0' ]] && {
                    for _user in $(ls /etc/bot/suspended/$_usub/users); do
                        usermod -U $_user
                    done
                }
                mv /etc/bot/suspended/$_usub /etc/bot/resale/$_usub
                sed -i "/\b$_usub\b/d" $suspended
            done <<<"$(grep -w 'SUBresale' /etc/bot/suspended/$_revd/$_revd)"
        }
        mv /etc/bot/suspended/$_revd /etc/bot/resale/$_revd
        sed -i "/\b$_revd\b/d" $suspended
        sed -i "s;$new_d;$(date "+%d/%m/%Y" -d "+$new_d days");" $_datfile
        ShellBot.sendMessage --chat_id ${message_chat_id[$id]} \
            --text "$(echo -e "⚠️ $_revd IT WAS SUSPENDED AND WAS REACTIVATED !")" \
            --parse_mode html
    } || {
        d_old=$(grep -w 'DAYS_resale' /etc/bot/resale/$_revd/$_revd | awk {'print $2'})
        sed -i "/\b$_revd\b/ s/DAYS: $d_old/DAYS: $new_d/" $active
        sed -i "/DAYS_resale/ s/$d_old/$new_d/" /etc/bot/resale/$_revd/$_revd
        sed -i "s;$new_d;$(date "+%d/%m/%Y" -d "+$new_d days");" $_datfile
    }
}

fun_list_rev() {
    [[ "$(grep -wc ${callback_query_from_username} $suspended)" != '0' ]] && {
        ShellBot.answerCallbackQuery --callback_query_id ${callback_query_id[$id]} \
            --text "⚠️ YOU ARE SUSPENDED! CONTACT THE ADMINISTRATOR"
        return 0
    }
    if [[ "${callback_query_from_id[$id]}" == "$id_admin" ]]; then
        local msg1
        msg1="◈──────────────────◈\n📃 RESELLERS LIST !\n◈──────────────────◈\n"
        [[ "$(grep -wc 'resale' $active)" != '0' ]] && {
            while read _atvs; do
                _uativ="$(echo $_atvs | awk '{print $2}')"
                [[ "$(grep -wc "$_uativ" $suspended)" == '0' ]] && _stsrev='Active' || _stsrev='Suspended'
                msg1+="• @$_uativ - $_stsrev\n"
            done <<<"$(grep -w 'resale' /etc/bot/lista_active)"
            ShellBot.sendMessage --chat_id ${callback_query_message_chat_id[$id]} \
                --text "$(echo -e "$msg1")" \
                --parse_mode html
            return 0
        } || {
            ShellBot.answerCallbackQuery --callback_query_id ${callback_query_id[$id]} \
                --text "YOU DO NOT HAVE RESELLERS"
            return 0
        }
    elif [[ "$(grep -w ${callback_query_from_username} $active | awk '{print $NF}')" == 'resale' ]]; then
        _patch="/etc/bot/resale"
        local msg1
        msg1="◈──────────────────◈\n📃 LIST OF SUBSELLERS !\n◈──────────────────◈\n"
        [[ "$(grep -wc "SUBresale" $_patch/${callback_query_from_username}/${callback_query_from_username})" != '0' ]] && {
            while read _listsub; do
                _usub="$(echo $_listsub | awk '{print $2}')"
                [[ "$(grep -wc "$_usub" $suspended)" == '0' ]] && _usts='ACTIVE' || _usts='SUSPENDED'
                msg1+="• @$_usub - $_usts\n"
            done <<<"$(grep -w 'SUBresale' $_patch/${callback_query_from_username}/${callback_query_from_username})"
            ShellBot.sendMessage --chat_id ${callback_query_message_chat_id[$id]} \
                --text "$(echo -e "$msg1")" \
                --parse_mode html
            return 0
        } || {
            ShellBot.answerCallbackQuery --callback_query_id ${callback_query_id[$id]} \
                --text "YOU DO NOT HAVE SUB RESELLERS"
            return 0
        }
    else
        ShellBot.answerCallbackQuery --callback_query_id ${callback_query_id[$id]} \
            --text "🚫 ACCESS DENIED 🚫"
        return 0
    fi
}

fun_susp_rev() {
    [[ "$(grep -wc ${callback_query_from_username} $suspended)" != '0' ]] && {
        ShellBot.answerCallbackQuery --callback_query_id ${callback_query_id[$id]} \
            --text "⚠️ YOU ARE SUSPENDED! CONTACT THE ADMINISTRATOR"
        return 0
    }
    [[ "${callback_query_from_id[$id]}" == "$id_admin" ]] || [[ "$(grep -wc ${callback_query_from_username} $active)" != '0' ]] && {
        ShellBot.sendMessage --chat_id ${callback_query_message_chat_id[$id]} \
            --text "🔒 SUSPEND DEALER 🔒\n\nInform his username [Ex: @@opiranv2rayproxy]:" \
            --reply_markup "$(ShellBot.ForceReply)"
    } || {
        ShellBot.answerCallbackQuery --callback_query_id ${callback_query_id[$id]} \
            --text "🚫 ACCESS DENIED 🚫"
        return 0
    }
}

susp_rev() {
    _revs=$1
    [[ -z "$_revs" ]] && {
        ShellBot.sendMessage --chat_id ${message_chat_id[$id]} \
            --text "$(echo -e "Error")"
        return 0
    }
    [[ -d "/etc/bot/suspended/$_revs" ]] && {
        ShellBot.sendMessage --chat_id ${message_chat_id[$id]} \
            --text "$(echo -e "THE USER IS ALREADY SUSPENDED !")" \
            --parse_mode html
        return 0
    }
    [[ ! -d "/etc/bot/resale/$_revs" ]] && {
        ShellBot.sendMessage --chat_id ${message_chat_id[$id]} \
            --text "$(echo -e "THE USER DOES NOT EXIST !")" \
            --parse_mode html
        return 0
    }
    [[ "${message_from_id[$id]}" == "$id_admin" ]] && {
        [[ "$(grep -wc 'SUBresale' /etc/bot/resale/$_revs/$_revs)" != '0' ]] && {
            while read _listsub3; do
                _usub3="$(echo $_listsub3 | awk '{print $2}')"
                _dir_users="/etc/bot/resale/$_usub3/users"
                [[ "$(ls $_dir_users | wc -l)" != '0' ]] && {
                    for _user in $(ls $_dir_users); do
                        usermod -L $_user
                        pkill -f $_user
                    done
                }
                mv /etc/bot/resale/$_usub3 /etc/bot/suspended/$_usub3
                grep -w "$_usub3" $active >>$suspended
            done <<<"$(grep -w 'SUBresale' /etc/bot/resale/$_revs/$_revs)"
        }
        [[ "$(ls /etc/bot/resale/$_revs/users | wc -l)" != '0' ]] && {
            for _user_ in $(ls /etc/bot/resale/$_revs/users); do
                usermod -L $_user_
                pkill -f $_user_
            done
        }
        mv /etc/bot/resale/$_revs /etc/bot/suspended/$_revs
        grep -w "$_revs" $active >>$suspended
        ShellBot.sendMessage --chat_id ${message_chat_id[$id]} \
            --text "$(echo -e "SUCCESSFULLY SUSPENDED")" \
            --parse_mode html
        return 0
    } || {
        [[ "$(grep -wc "$_revs" /etc/bot/resale/${message_from_username}/${message_from_username})" != '0' ]] && {
            [[ "$(ls /etc/bot/resale/$_revs/users | wc -l)" != '0' ]] && {
                for _user_ in $(ls /etc/bot/resale/$_revs/users); do
                    usermod -L $_user_
                    pkill -f $_user_
                done
            }
            mv /etc/bot/resale/$_revs /etc/bot/suspended/$_revs
            grep -w "$_revs" $active >>$suspended
            ShellBot.sendMessage --chat_id ${message_chat_id[$id]} \
                --text "$(echo -e "SUCCESSFULLY SUSPENDED")" \
                --parse_mode html
            return 0
        } || {
            ShellBot.sendMessage --chat_id ${message_chat_id[$id]} \
                --text "$(echo -e "THE SUB DEALER DOES NOT EXIST")" \
                --parse_mode html
            return 0
        }
    }
}

infouserbot() {
    [[ $(grep -wc ${message_from_username} $active) != '0' ]] && {
        _cont_limit=$(grep -w ${message_from_username} $active | awk '{print $4}')
        fun_verif_limit_rev ${message_from_username}
        _cont_disp=$(echo $_cont_limit - $_result | bc)
        ShellBot.sendMessage --chat_id ${message_chat_id[$id]} \
            --text "$(echo -e "<b>NAME: </> ${message_from_first_name[$(ShellBot.ListUpdates)]}\n<b>USERNAME:</>" "@${message_from_username[$(ShellBot.ListUpdates)]:-null}")\n<b>ID:</> ${message_from_id[$(ShellBot.ListUpdates)]}\nACCESS: RESALE\n<b>TOTAL LIMIT:</b> $_cont_limit\n<b>REMAINING LIMIT:</b> $_cont_disp" \
            --parse_mode html
        return 0
    } || {
        ShellBot.sendMessage --chat_id ${message_chat_id[$id]} \
            --text "$(echo -e "<b>NAME: </> ${message_from_first_name[$(ShellBot.ListUpdates)]}\n<b>USERNAME:</>" "@${message_from_username[$(ShellBot.ListUpdates)]:-null}")\n<b>ID:</> ${message_from_id[$(ShellBot.ListUpdates)]} " \
            --parse_mode html
	ShellBot.sendSticker --chat_id ${message_chat_id[$id]} \
            --sticker "CAACAgIAAxkBAAEDbJdhrlMi5WT2IvHUwY_3V9t-HQ_tUQACFgADwDZPE2Ah1y2iBLZnIgQ"
        return 0
    }
}

fun_menuresale() {
    [[ "$(grep -wc ${callback_query_from_username} $suspended)" != '0' ]] && {
        ShellBot.answerCallbackQuery --callback_query_id ${callback_query_id[$id]} \
            --text "⚠️ YOU ARE SUSPENDED! CONTACT THE ADMINISTRATOR"
        return 0
    }
    [[ "${callback_query_from_id[$id]}" == "$id_admin" ]] || [[ "$(grep -wc ${callback_query_from_username} $active)" != '0' ]] && {
        ShellBot.editMessageText --chat_id ${callback_query_message_chat_id[$id]} \
            --message_id ${callback_query_message_message_id[$id]} \
            --text "SELECT AN OPTION BELOW:" \
            --reply_markup "$(ShellBot.InlineKeyboardMarkup --button 'menu4')"
        return 0
    }
}

# LISTA MENU ADMIN
unset menu1
menu1=''
ShellBot.InlineKeyboardButton --button 'menu1' --line 1 --text 'CREATE USER' --callback_date '_createuser'
ShellBot.InlineKeyboardButton --button 'menu1' --line 2 --text 'CREATE TEST' --callback_date '_createtest'
ShellBot.InlineKeyboardButton --button 'menu1' --line 3 --text 'REMOVE USER' --callback_date '_deluser'
ShellBot.InlineKeyboardButton --button 'menu1' --line 4 --text 'CHANGE PASSWORD' --callback_date '_altpassword'
ShellBot.InlineKeyboardButton --button 'menu1' --line 5 --text 'CHANGE LIMIT' --callback_date '_altlimit'
ShellBot.InlineKeyboardButton --button 'menu1' --line 6 --text 'CHANGE DATE' --callback_date '_altdate'
ShellBot.InlineKeyboardButton --button 'menu1' --line 7 --text 'ONLINE USERS' --callback_date '_monitor'
ShellBot.InlineKeyboardButton --button 'menu1' --line 8 --text 'INFO USERS' --callback_date '_verusers'
ShellBot.InlineKeyboardButton --button 'menu1' --line 9 --text 'EXPIRED' --callback_date '_expired'
ShellBot.InlineKeyboardButton --button 'menu1' --line 1 --text 'INFO VPS' --callback_date '_infovps'
ShellBot.InlineKeyboardButton --button 'menu1' --line 2 --text 'OTIMIZAR' --callback_date '_otimizar'
ShellBot.InlineKeyboardButton --button 'menu1' --line 3 --text 'FILES' --callback_date '_arqdown'
ShellBot.InlineKeyboardButton --button 'menu1' --line 4 --text 'RESALE' --callback_date '_opcoesrev'
ShellBot.InlineKeyboardButton --button 'menu1' --line 5 --text 'SPEEDTEST' --callback_date '_speedtest'
ShellBot.InlineKeyboardButton --button 'menu1' --line 6 --text 'BACKUP USERS' --callback_date '_backupusers'
ShellBot.InlineKeyboardButton --button 'menu1' --line 7 --text "AUTO BACKUP" --callback_date '_autobkp'
ShellBot.InlineKeyboardButton --button 'menu1' --line 8 --text 'REPORT' --callback_date '_report'
ShellBot.InlineKeyboardButton --button 'menu1' --line 9 --text 'HELP' --callback_date '_help'
ShellBot.regHandleFunction --function fun_adduser --callback_date _createuser
ShellBot.regHandleFunction --function fun_add_test --callback_date _createtest
ShellBot.regHandleFunction --function fun_deluser --callback_date _deluser
ShellBot.regHandleFunction --function alter_password --callback_date _altpassword
ShellBot.regHandleFunction --function alter_limit --callback_date _altlimit
ShellBot.regHandleFunction --function alter_date --callback_date _altdate
ShellBot.regHandleFunction --function fun_down --callback_date _arqdown
ShellBot.regHandleFunction --function monitor_ssh --callback_date _monitor
ShellBot.regHandleFunction --function ver_users --callback_date _verusers
ShellBot.regHandleFunction --function fun_exp_user --callback_date _expired
ShellBot.regHandleFunction --function otimizer --callback_date _otimizar
ShellBot.regHandleFunction --function speed_test --callback_date _speedtest
ShellBot.regHandleFunction --function infovps --callback_date _infovps
ShellBot.regHandleFunction --function backup_users --callback_date _backupusers
ShellBot.regHandleFunction --function fun_backauto --callback_date _autobkp
ShellBot.regHandleFunction --function report_rev --callback_date _report
ShellBot.regHandleFunction --function fun_help --callback_date _help
ShellBot.regHandleFunction --function fun_menuresale --callback_date _opcoesrev
unset keyboard1
keyboard1="$(ShellBot.InlineKeyboardMarkup -b 'menu1')"

# LISTA MENU REVENDEDOR
unset menu2
menu2=''
ShellBot.InlineKeyboardButton --button 'menu2' --line 1 --text 'CREATE USER' --callback_date '_createuser2'
ShellBot.InlineKeyboardButton --button 'menu2' --line 1 --text 'CREATE TEST' --callback_date '_createtest2'
ShellBot.InlineKeyboardButton --button 'menu2' --line 2 --text 'REMOVE USER' --callback_date '_deluser2'
ShellBot.InlineKeyboardButton --button 'menu2' --line 2 --text 'ONLINE USERS' --callback_date '_monitor2'
ShellBot.InlineKeyboardButton --button 'menu2' --line 3 --text 'CHANGE LIMIT' --callback_date '_altlimit2'
ShellBot.InlineKeyboardButton --button 'menu2' --line 3 --text 'USER INFO' --callback_date '_verusers2'
ShellBot.InlineKeyboardButton --button 'menu2' --line 4 --text 'CHANGE PASSWORD' --callback_date '_altpassword2'
ShellBot.InlineKeyboardButton --button 'menu2' --line 4 --text 'EXPIRED' --callback_date '_expired2'
ShellBot.InlineKeyboardButton --button 'menu2' --line 5 --text 'CHANGE DATE' --callback_date '_altdate2'
ShellBot.InlineKeyboardButton --button 'menu2' --line 5 --text 'RESALE' --callback_date '_opcoesrev2'
ShellBot.InlineKeyboardButton --button 'menu2' --line 6 --text 'REPORT' --callback_date '_report2'
ShellBot.InlineKeyboardButton --button 'menu2' --line 6 --text 'HELP' --callback_date '_help2'
ShellBot.regHandleFunction --function fun_adduser --callback_date _createuser2
ShellBot.regHandleFunction --function fun_add_test --callback_date _createtest2
ShellBot.regHandleFunction --function fun_deluser --callback_date _deluser2
ShellBot.regHandleFunction --function alter_password --callback_date _altpassword2
ShellBot.regHandleFunction --function alter_limit --callback_date _altlimit2
ShellBot.regHandleFunction --function alter_date --callback_date _altdate2
ShellBot.regHandleFunction --function monitor_ssh --callback_date _monitor2
ShellBot.regHandleFunction --function ver_users --callback_date _verusers2
ShellBot.regHandleFunction --function fun_exp_user --callback_date _expired2
ShellBot.regHandleFunction --function report_rev --callback_date _report2
ShellBot.regHandleFunction --function fun_menuresale --callback_date _opcoesrev2
ShellBot.regHandleFunction --function fun_help --callback_date _help2
unset keyboard2
keyboard2="$(ShellBot.InlineKeyboardMarkup -b 'menu2')"

#LISTA MUNU SUB REVENDEDOR
unset menu3
menu3=''
ShellBot.InlineKeyboardButton --button 'menu3' --line 1 --text 'CREATE USER' --callback_date '_createuser3'
ShellBot.InlineKeyboardButton --button 'menu3' --line 1 --text 'CREATE TEST' --callback_date '_createtest3'
ShellBot.InlineKeyboardButton --button 'menu3' --line 2 --text 'REMOVE USER' --callback_date '_deluser3'
ShellBot.InlineKeyboardButton --button 'menu3' --line 2 --text 'ONLINE USERS' --callback_date '_monitor3'
ShellBot.InlineKeyboardButton --button 'menu3' --line 3 --text 'CHANGE LIMIT' --callback_date '_altlimit3'
ShellBot.InlineKeyboardButton --button 'menu3' --line 3 --text 'USER INFO' --callback_date '_verusers3'
ShellBot.InlineKeyboardButton --button 'menu3' --line 4 --text 'CHANGE PASSWORD' --callback_date '_altpassword3'
ShellBot.InlineKeyboardButton --button 'menu3' --line 4 --text 'EXPIRED' --callback_date '_expired3'
ShellBot.InlineKeyboardButton --button 'menu3' --line 5 --text 'CHANGE DATE' --callback_date '_altdate3'
ShellBot.InlineKeyboardButton --button 'menu3' --line 5 --text 'HELP' --callback_date '_help3'
ShellBot.regHandleFunction --function fun_adduser --callback_date _createuser3
ShellBot.regHandleFunction --function fun_add_test --callback_date _createtest3
ShellBot.regHandleFunction --function fun_deluser --callback_date _deluser3
ShellBot.regHandleFunction --function alter_password --callback_date _altpassword3
ShellBot.regHandleFunction --function alter_limit --callback_date _altlimit3
ShellBot.regHandleFunction --function alter_date --callback_date _altdate3
ShellBot.regHandleFunction --function monitor_ssh --callback_date _monitor3
ShellBot.regHandleFunction --function ver_users --callback_date _verusers3
ShellBot.regHandleFunction --function fun_exp_user --callback_date _expired3
ShellBot.regHandleFunction --function fun_help --callback_date _help3
unset keyboard3
keyboard3="$(ShellBot.InlineKeyboardMarkup -b 'menu3')"

#LISTA MENU OPCOES resale
unset menu4
menu4=''
ShellBot.InlineKeyboardButton --button 'menu4' --line 1 --text 'ADD RESALE' --callback_date '_addrev'
ShellBot.InlineKeyboardButton --button 'menu4' --line 2 --text 'REMOVE RESALE' --callback_date '_delrev'
ShellBot.InlineKeyboardButton --button 'menu4' --line 3 --text 'CHANGE RESALE LIMIT' --callback_date '_limrev'
ShellBot.InlineKeyboardButton --button 'menu4' --line 4 --text 'CHANGE RESALE DATE' --callback_date '_datrev'
ShellBot.InlineKeyboardButton --button 'menu4' --line 5 --text 'LIST RESALE' --callback_date '_listrev'
ShellBot.InlineKeyboardButton --button 'menu4' --line 6 --text 'SUSPEND RESALE' --callback_date '_suspresales'
ShellBot.regHandleFunction --function fun_add_resale --callback_date _addrev
ShellBot.regHandleFunction --function fun_del_rev --callback_date _delrev
ShellBot.regHandleFunction --function fun_lim_rev --callback_date _limrev
ShellBot.regHandleFunction --function fun_dat_rev --callback_date _datrev
ShellBot.regHandleFunction --function fun_list_rev --callback_date _listrev
ShellBot.regHandleFunction --function fun_susp_rev --callback _suspresales
unset keyboard4
keyboard4="$(ShellBot.InlineKeyboardMarkup -b 'menu4')"

while :; do
    [[ -e "/etc/opiran/backups/backup.vps" ]] && {
        backup_auto
    }
    #Obtem as atualizações
    ShellBot.getUpdates --limit 100 --offset $(ShellBot.OffsetNext) --timeout 35
    #Lista o índice das atualizações
    for id in $(ShellBot.ListUpdates); do
        #Inicio thread
        (
            ShellBot.watchHandle --callback_date ${callback_query_date[$id]}
            # Requisições somente no privado.
            [[ ${message_chat_type[$id]} != 'private' ]] && continue
            [[ ${message_text[$id]} ]] || restaure_backup
            CAD_ARQ=/tmp/cad.${message_from_id[$id]}
            if [[ ${message_entities_type[$id]} == bot_command ]]; then
                #Verifica se a mensagem enviada pelo usuário é um command válido.
                case ${message_text[$id]} in
                *)
                    :
                    #commands
                    command=(${message_text[$id]})
                    [[ "${command[0]}" = "/start" ]] && msg_good_coming
                    [[ "${command[0]}" = "/menu" ]] && fun_menu
                    [[ "${command[0]}" = "/info" ]] && infouserbot
                    [[ "${command[0]}" = "/help" || "${command[0]}" = "/help" ]] && fun_help
                    [[ "${command[0]}" = "/bot" || "${command[0]}" = "/about" ]] && aboutmim
                    ;;
                esac
            fi
            if [[ ${message_reply_to_message_message_id[$id]} ]]; then
                # Parse the response interface.
                case ${message_reply_to_message_text[$id]} in
                '👤 CREATE USER 👤\n\nUsername:')
                    verifica_access
                    [[ "$_erro" == '1' ]] && break
                    [[ "$(awk -F : '$3 >= 1000 { print $1 }' /etc/passwd | grep -w ${message_text[$id]} | wc -l)" != '0' ]] && {
                        ShellBot.sendMessage --chat_id ${message_chat_id[$id]} \
                            --text "$(echo -e "❌ Error! INVALID USER ❌\n\n⚠️ Enter Another Name..")" \
                            --parse_mode html
                        >$CAD_ARQ
                        break
                    }
                    [ "${message_text[$id]}" == 'root' ] && {
                        ShellBot.sendMessage --chat_id ${message_chat_id[$id]} \
                            --text "$(echo -e "❌ Error! INVALID USER ❌\n\n⚠️ Enter Another Name..")" \
                            --parse_mode html
                        >$CAD_ARQ
                        break
                    }
                    sizemin=$(echo -e ${#message_text[$id]})
                    [[ "$sizemin" -lt '4' ]] && {
                        ShellBot.sendMessage --chat_id ${message_chat_id[$id]} \
                            --text "$(echo -e "❌ Error !\n\nUse at least 4 characters\n[EX: test]")" \
                            --parse_mode html
                        >$CAD_ARQ
                        break
                    }
                    sizemax=$(echo -e ${#message_text[$id]})
                    [[ "$sizemax" -gt '10' ]] && {
                        ShellBot.sendMessage --chat_id ${message_chat_id[$id]} \
                            --text "$(echo -e "❌ Error !\n\nUse a maximum of 8 characters\n[EX: abcdefgh]")" \
                            --parse_mode html
                        >$CAD_ARQ
                        break
                    }
                    echo "name: ${message_text[$id]}" >$CAD_ARQ
                    ShellBot.sendMessage --chat_id ${message_from_id[$id]} \
                        --text 'password:' \
                        --reply_markup "$(ShellBot.ForceReply)" # Força a resposta.
                    ;;
                'password:')
                    sizepass=$(echo -e ${#message_text[$id]})
                    verifica_access
                    [[ "$_erro" == '1' ]] && break
                    [[ "$sizepass" -lt '4' ]] && {
                        ShellBot.sendMessage --chat_id ${message_chat_id[$id]} \
                            --text "$(echo -e "❌ Error !\n\nUse at least 4 characters\n[EX: 1234]")" \
                            --parse_mode html
                        >$CAD_ARQ
                        break
                    }
                    echo "password: ${message_text[$id]}" >>$CAD_ARQ
                    # next field.
                    ShellBot.sendMessage --chat_id ${message_from_id[$id]} \
                        --text 'limit:' \
                        --reply_markup "$(ShellBot.ForceReply)"
                    ;;
                'limit:')
                    verifica_access
                    [[ "$_erro" == '1' ]] && break
                    [[ ${message_text[$id]} != ?(+|-)+([0-9]) ]] && {
                        ShellBot.sendMessage --chat_id ${message_chat_id[$id]} \
                            --text "$(echo -e "❌ Error ! \n\nuse only numbers [EX: 1]")" \
                            --parse_mode html
                        >$CAD_ARQ
                        break
                    }
                    [[ "${message_from_id[$id]}" != "$id_admin" ]] && {
                        _limTotal=$(grep -w "${message_from_username}" $active | awk '{print $4}')
                        fun_verif_limit_rev ${message_from_username}
                        _limsomarev2=$(echo "$_result + ${message_text[$id]}" | bc)
                        [[ "$_limsomarev2" -gt "$_limTotal" ]] && {
                            _restant1=$(($_limTotal - $_result))
                            ShellBot.sendMessage --chat_id ${message_chat_id[$id]} \
                                --text "$(echo -e "❌ you don't have enough limit\n\nAvailable limit: $_restant1 ")" \
                                --parse_mode html
                            >$CAD_ARQ
                            break
                        }
                    }
                    echo "limit: ${message_text[$id]}" >>$CAD_ARQ
                    # next field.
                    ShellBot.sendMessage --chat_id ${message_from_id[$id]} \
                        --text 'Validity in days: ' \
                        --reply_markup "$(ShellBot.ForceReply)"
                    ;;

                'Validity in days:')
                    verifica_access
                    [[ "$_erro" == '1' ]] && break
                    [[ ${message_text[$id]} != ?(+|-)+([0-9]) ]] && {
                        ShellBot.sendMessage --chat_id ${message_chat_id[$id]} \
                            --text "$(echo -e "❌ Error ! \n\nuse only numbers [EX: 30]")" \
                            --parse_mode html
                        >$CAD_ARQ
                        break
                    }
                    info_date=$(date '+%d/%m/%C%y' -d " +${message_text[$id]} days")
                    echo "validity: $info_date" >>$CAD_ARQ
                    create_user $CAD_ARQ
                    [[ "(grep -w ${message_text[$id]} /etc/passwd)" = '0' ]] && {
                        ShellBot.sendMessage --chat_id ${message_chat_id[$id]} \
                            --text "$(echo -e ❌ Error creating user !)" \
                            --parse_mode html
                        >$CAD_ARQ
                        break
                    }
                    [[ "$(ls /etc/bot/files | wc -l)" != '0' ]] && {
                        ShellBot.sendMessage --chat_id ${message_from_id[$id]} \
                            --text '📥 AVAILABLE FILES 📥\n\nDo you want to download? Yes or no?:' \
                            --reply_markup "$(ShellBot.ForceReply)"
                    } || {
                        ShellBot.sendMessage --chat_id ${message_from_id[$id]} \
                            --text "<b>====================================</b>\n<b>----------♻️ @opiranv2rayproxy ♻️----------</b>\n<b>====================================</b>\n\n<b>◈─────⪧ IMPORTANT ⪦──────◈</b>\n\n◈⪧ 🚫 NO SPAM\n◈⪧ ⚠️ NO DDOS\n◈⪧ 🎭 NO Hacking\n◈⪧ ⛔️ NO Carding\n◈⪧ 🙅‍♂️ NO Torrent\n◈⪧ ❌ NO MultiLogin\n◈⪧ 🤷‍♂️ NO Illegal Activities\n\n<b>◈─────⪧ SSH ACCOUNT ⪦─────◈</b>\n\n<b>◈ Host / IP       :⪧</b>  <code>$(cat /etc/IP)</code>\n<b>◈ Username    :⪧</b>  <code>$(awk -F " " '/name/ {print $2}' $CAD_ARQ)</code>\n<b>◈ Password     :⪧</b>  <code>$(awk -F " " '/password/ {print $2}' $CAD_ARQ)</code>\n<b>◈ Login Limit   :⪧</b> $(awk -F " " '/limit/ {print $2}' $CAD_ARQ)\n<b>◈ Expire Date  :⪧</b> $(awk -F " " '/validity/ {print $2}' $CAD_ARQ)\n\n<b>◈──────⪧ PORTS ⪦ ───────◈</b>\n\n◈ SSH            ⌁   22\n◈ SSL             ⌁  443\n◈ Squid         ⌁  8080\n◈ DropBear ⌁  80\n◈ BadVPN    ⌁  7300\n\n<b>◈───⪧ONLINE USER COUNT⪦────◈ </b>\n\nhttp://$(cat /etc/IP):8888/server/online\n\n<b>◈──────────────────◈</b>\n\n<b>©️ ----------♻️ @opiranv2rayproxy ♻️----------</b>\n<b>◈──────────────────◈</b>" \
                            --parse_mode html
                        break
                    }
                    ;;
                '📥 AVAILABLE FILES 📥\n\nDo you want to download? Yes or no?:')
                    verifica_access
                    [[ "$_erro" == '1' ]] && break
                    [[ ${message_text[$id]} != ?(+|-)+([A-Za-z]) ]] && {
                        ShellBot.sendMessage --chat_id ${message_chat_id[$id]} \
                            --text "$(echo -e "❌ Invalid option ❌\n\n⚠️ use only letters [EX: Yes or No]")" \
                            --parse_mode html
                        ShellBot.sendMessage --chat_id ${message_from_id[$id]} \
                            --text "<b>====================================</b>\n<b>----------♻️ @opiranv2rayproxy ♻️----------</b>\n<b>====================================</b>\n\n<b>◈─────⪧ IMPORTANT ⪦──────◈</b>\n\n◈⪧ 🚫 NO SPAM\n◈⪧ ⚠️ NO DDOS\n◈⪧ 🎭 NO Hacking\n◈⪧ ⛔️ NO Carding\n◈⪧ 🙅‍♂️ NO Torrent\n◈⪧ ❌ NO MultiLogin\n◈⪧ 🤷‍♂️ NO Illegal Activities\n\n<b>◈─────⪧ SSH ACCOUNT ⪦─────◈</b>\n\n<b>◈ Host / IP       :⪧</b>  <code>$(cat /etc/IP)</code>\n<b>◈ Username    :⪧</b>  <code>$(awk -F " " '/name/ {print $2}' $CAD_ARQ)</code>\n<b>◈ Password     :⪧</b>  <code>$(awk -F " " '/password/ {print $2}' $CAD_ARQ)</code>\n<b>◈ Login Limit   :⪧</b> $(awk -F " " '/limit/ {print $2}' $CAD_ARQ)\n<b>◈ Expire Date  :⪧</b> $(awk -F " " '/validity/ {print $2}' $CAD_ARQ)\n\n<b>◈──────⪧ PORTS ⪦ ───────◈</b>\n\n◈ SSH            ⌁   22\n◈ SSL             ⌁  443\n◈ Squid         ⌁  8080\n◈ DropBear ⌁  80\n◈ BadVPN    ⌁  7300\n\n<b>◈───⪧ONLINE USER COUNT⪦────◈ </b>\n\nhttp://$(cat /etc/IP):8888/server/online\n\n<b>◈──────────────────◈</b>\n\n<b>©️ ----------♻️ @opiranv2rayproxy ♻️----------</b>\n<b>◈──────────────────◈</b>" \
                            --parse_mode html
                        break
                    }
                    [[ "${message_text[$id]}" = @(Sim|sim|SIM) ]] && {
                        msg_cli="◈──────────────────◈\n"
                        msg_cli+="<b>PRE-CONFIGURED FILES </b>❗\n"
                        msg_cli+="◈──────────────────◈\n\n"
                        for _file in $(ls /etc/bot/files); do
                            i=$(($i + 1))
                            msg_cli+="<b>[$i]</b> - $_file\n"
                        done
                        ShellBot.sendMessage --chat_id ${message_chat_id[$id]} \
                            --text "$(echo -e "$msg_cli")" \
                            --parse_mode html
                        ShellBot.sendMessage --chat_id ${message_from_id[$id]} \
                            --text 'Enter the File Number:' \
                            --reply_markup "$(ShellBot.ForceReply)"
                    } || {
                        ShellBot.sendMessage --chat_id ${message_from_id[$id]} \
                            --text "<b>====================================</b>\n<b>----------♻️ @opiranv2rayproxy ♻️----------</b>\n<b>====================================</b>\n\n<b>◈─────⪧ IMPORTANT ⪦──────◈</b>\n\n◈⪧ 🚫 NO SPAM\n◈⪧ ⚠️ NO DDOS\n◈⪧ 🎭 NO Hacking\n◈⪧ ⛔️ NO Carding\n◈⪧ 🙅‍♂️ NO Torrent\n◈⪧ ❌ NO MultiLogin\n◈⪧ 🤷‍♂️ NO Illegal Activities\n\n<b>◈─────⪧ SSH ACCOUNT ⪦─────◈</b>\n\n<b>◈ Host / IP       :⪧  <code>$(cat /etc/IP)</code>\n<b>◈ Username    :⪧</b>  <code>$(awk -F " " '/name/ {print $2}' $CAD_ARQ)</code>\n<b>◈ Password     :⪧</b>  <code>$(awk -F " " '/password/ {print $2}' $CAD_ARQ)</code>\n<b>◈ Login Limit   :⪧</b> $(awk -F " " '/limit/ {print $2}' $CAD_ARQ)\n<b>◈ Expire Date  :⪧</b> $(awk -F " " '/validity/ {print $2}' $CAD_ARQ)\n\n<b>◈──────⪧ PORTS ⪦ ───────◈</b>\n\n◈ SSH            ⌁   22\n◈ SSL             ⌁  443\n◈ Squid         ⌁  8080\n◈ DropBear ⌁  80\n◈ BadVPN    ⌁  7300\n\n<b>◈───⪧ONLINE USER COUNT⪦────◈ </b>\n\nhttp://$(cat /etc/IP):8888/server/online\n\n<b>◈──────────────────◈</b>\n\n<b>©️ ----------♻️ @opiranv2rayproxy ♻️----------</b>\n<b>◈──────────────────◈</b>" \
                            --parse_mode html
                    }
                    ;;
                'Enter the File Number:')
                    verifica_access
                    [[ "$_erro" == '1' ]] && break
                    [[ ${message_text[$id]} != ?(+|-)+([0-9]) ]] && {
                        ShellBot.sendMessage --chat_id ${message_chat_id[$id]} \
                            --text "$(echo -e "❌ Invalid option ❌ \n\n⚠️ use only numbers [EX: 1]")" \
                            --parse_mode html
                        ShellBot.sendMessage --chat_id ${message_from_id[$id]} \
                            --text "<b>====================================</b>\n<b>----------♻️ @opiranv2rayproxy ♻️----------</b>\n<b>====================================</b>\n\n<b>◈─────⪧ IMPORTANT ⪦──────◈</b>\n\n◈⪧ 🚫 NO SPAM\n◈⪧ ⚠️ NO DDOS\n◈⪧ 🎭 NO Hacking\n◈⪧ ⛔️ NO Carding\n◈⪧ 🙅‍♂️ NO Torrent\n◈⪧ ❌ NO MultiLogin\n◈⪧ 🤷‍♂️ NO Illegal Activities\n\n<b>◈─────⪧ SSH ACCOUNT ⪦─────◈</b>\n\n<b>◈ Host / IP       :⪧  <code>$(cat /etc/IP)</code>\n<b>◈ Username    :⪧</b>  <code>$(awk -F " " '/name/ {print $2}' $CAD_ARQ)</code>\n<b>◈ Password     :⪧</b>  <code>$(awk -F " " '/password/ {print $2}' $CAD_ARQ)</code>\n<b>◈ Login Limit   :⪧</b> $(awk -F " " '/limit/ {print $2}' $CAD_ARQ)\n<b>◈ Expire Date  :⪧</b> $(awk -F " " '/validity/ {print $2}' $CAD_ARQ)\n\n<b>◈──────⪧ PORTS ⪦ ───────◈</b>\n\n◈ SSH            ⌁   22\n◈ SSL             ⌁  443\n◈ Squid         ⌁  8080\n◈ DropBear ⌁  80\n◈ BadVPN    ⌁  7300\n\n<b>◈───⪧ONLINE USER COUNT⪦────◈ </b>\n\nhttp://$(cat /etc/IP):8888/server/online\n\n<b>◈──────────────────◈</b>\n\n<b>©️ ----------♻️ @opiranv2rayproxy ♻️----------</b>\n<b>◈──────────────────◈</b>" \
                            --parse_mode html
                        >$CAD_ARQ
                        break
                    }
                    fun_download ${message_text[$id]} $CAD_ARQ
                    # Limpa o arquivo temporário.
                    >$CAD_ARQ
                    break
                    ;;
                '🗑 REMOVE USER 🗑\n\nUsername:')
                    verifica_access
                    [[ "$_erro" == '1' ]] && break
                    fun_del_user ${message_text[$id]}
                    [[ "$_erro" == '1' ]] && break
                    ShellBot.sendMessage --chat_id ${message_from_id[$id]} \
                        --text "✅ *Successfully removed.* 🚮" \
                        --parse_mode markdown
                    ;;
                '🔐 Change Password 🔐\n\nUsername:')
                    verifica_access
                    [[ "$_erro" == '1' ]] && break
                    fun_verif_user ${message_text[$id]}
                    echo "$_erro"
                    [[ "$_erro" == '1' ]] && break
                    echo "${message_text[$id]}" >/tmp/name-s
                    ShellBot.sendMessage --chat_id ${message_from_id[$id]} \
                        --text 'new password:' \
                        --reply_markup "$(ShellBot.ForceReply)"
                    ;;
                'new password:')
                    sizepass=$(echo -e ${#message_text[$id]})
                    verifica_access
                    [[ "$_erro" == '1' ]] && break
                    [[ "$sizepass" -lt '4' ]] && {
                        ShellBot.sendMessage --chat_id ${message_chat_id[$id]} \
                            --text "$(echo -e "❌ Error !\n\n⚠️ Use at least 4 characters [EX: 1234]")" \
                            --parse_mode html
                        break
                    }
                    alter_password_user $(cat /tmp/name-s) ${message_text[$id]}
                    [[ "$_erro" == '1' ]] && break
                    ShellBot.sendMessage --chat_id ${message_from_id[$id]} \
                        --text "$(echo -e "◈──────────────────◈\n<b>✅ PASSWORD CHANGED !</b> !\n◈──────────────────◈\n\n<b>User:</b> $(cat /tmp/name-s)\n<b>New Password:</b> ${message_text[$id]}")" \
                        --parse_mode html
                    rm /tmp/name-s >/dev/null 2>&1
                    ;;
                '👥 Change Limit 👥\n\nUsername:')
                    verifica_access
                    [[ "$_erro" == '1' ]] && break
                    echo $_erro segundo
                    fun_verif_user ${message_text[$id]}
                    echo "$_erro"
                    [[ "$_erro" == '1' ]] && break
                    echo "${message_text[$id]}" >/tmp/name-l
                    ShellBot.sendMessage --chat_id ${message_from_id[$id]} \
                        --text 'new limit:' \
                        --reply_markup "$(ShellBot.ForceReply)"
                    ;;
                'new limit:')
                    verifica_access
                    [[ "$_erro" == '1' ]] && break
                    [[ ${message_text[$id]} != ?(+|-)+([0-9]) ]] && {
                        ShellBot.sendMessage --chat_id ${message_chat_id[$id]} \
                            --text "$(echo -e "❌ Error ! \n\n⚠️ use only numbers [EX: 1]")" \
                            --parse_mode html
                        break
                    }
                    alter_limit_user $(cat /tmp/name-l) ${message_text[$id]}
                    [[ "$_erro" == '1' ]] && break
                    ShellBot.sendMessage --chat_id ${message_from_id[$id]} \
                        --text "$(echo -e "◈──────────────────◈\n<b>✅ Limit CHANGED !</b> !\n◈──────────────────◈\n\n<b>User:</b> $(cat /tmp/name-l)\n<b>New Limit:</b> ${message_text[$id]}")" \
                        --parse_mode html
                    rm /tmp/name-l >/dev/null 2>&1
                    ;;
                '⏳ Change Date ⏳\n\nUsername:')
                    verifica_access
                    [[ "$_erro" == '1' ]] && break
                    fun_verif_user ${message_text[$id]}
                    [[ "$_erro" == '1' ]] && break
                    echo "${message_text[$id]}" >/tmp/name-d
                    ShellBot.sendMessage --chat_id ${message_from_id[$id]} \
                        --text 'inform the days or date:' \
                        --reply_markup "$(ShellBot.ForceReply)"
                    ;;
                'inform the days or date:')
                    verifica_access
                    [[ "$_erro" == '1' ]] && break
                    [[ ${message_text[$id]} != ?(+|-)+([0-9/]) ]] && {
                        ShellBot.sendMessage --chat_id ${message_chat_id[$id]} \
                            --text "$(echo -e "❌ Error! follow the example\n\nformat days [EX: 30]\nDate format [EX: 30/12/2019]")" \
                            --parse_mode html
                        break
                    }
                    alter_date_user $(cat /tmp/name-d) ${message_text[$id]}
                    [[ "$_erro" == '1' ]] && break
                    ShellBot.sendMessage --chat_id ${message_from_id[$id]} \
                        --text "$(echo -e "◈──────────────────◈\n<b>✅ DATE CHANGED !</b> !\n◈──────────────────◈\n\n<b>User:</b> $(cat /tmp/name-d)\n<b>New Date:</b> $udate")" \
                        --parse_mode html
                    rm /tmp/name-d >/dev/null 2>&1
                    ;;
                '[1] - ADD FILE\n[2] - DELETE FILE\n\nInform the option [1-2]:')
                    [[ ${message_text[$id]} != ?(+|-)+([0-9]) ]] && {
                        ShellBot.sendMessage --chat_id ${message_chat_id[$id]} \
                            --text "$(echo -e "❌ Error ! \n\n⚠️ use only numbers [EX: 1 or 2]")" \
                            --parse_mode html
                        break
                    }
                    if [[ "${message_text[$id]}" = '1' ]]; then
                        ShellBot.sendMessage --chat_id ${message_from_id[$id]} \
                            --text "📤 HOST FILES 📤\n\nsend me the file:" \
                            --reply_markup "$(ShellBot.ForceReply)"
                    elif [[ "${message_text[$id]}" = '2' ]]; then
                        [[ $(ls /etc/bot/files | wc -l) != '0' ]] && {
                            msg_cli1="◈──────────────────◈\n"
                            msg_cli1+="🚀<b> HOSTED FILES </b>\n"
                            msg_cli1+="◈──────────────────◈\n\n"
                            for _file in $(ls /etc/bot/files); do
                                i=$(($i + 1))
                                msg_cli1+="<b>[$i]</b> - $_file\n"
                            done
                            ShellBot.sendMessage --chat_id ${message_chat_id[$id]} \
                                --text "$(echo -e "$msg_cli1")" \
                                --parse_mode html
                            ShellBot.sendMessage --chat_id ${message_from_id[$id]} \
                                --text "🗑Delete File\nEnter the File Number:" \
                                --reply_markup "$(ShellBot.ForceReply)"
                        } || {
                            ShellBot.sendMessage --chat_id ${message_chat_id[$id]} \
                                --text "$(echo -e "There are no files available")" \
                                --parse_mode html
                            break
                        }
                    else
                        ShellBot.sendMessage --chat_id ${message_chat_id[$id]} \
                            --text "$(echo -e "❌ Invalid option")" \
                            --parse_mode html
                        break
                    fi
                    ;;
                '🗑Delete File\nEnter the File Number:')
                    [[ "${message_from_id[$id]}" != "$id_admin" ]] && break
                    Opc1=${message_text[$id]}
                    echo $Opc1
                    [[ ${message_text[$id]} != ?(+|-)+([0-9]) ]] && {
                        ShellBot.sendMessage --chat_id ${message_chat_id[$id]} \
                            --text "$(echo -e "❌ Error Deleting File ! \n\n⚠️ use only numbers [EX: 1]")" \
                            --parse_mode html
                        break
                    } || {
                        echo "opcao $Opc1"
                        _DirArq=$(ls /etc/bot/files)
                        i=0
                        unset _Pass
                        while read _Arq; do
                            i=$(expr $i + 1)
                            _oP=$i
                            [[ $i == [1-9] ]] && i=0$i && oP+=" 0$i"
                            echo -e "[$i] - $_Arq"
                            _Pass+="\n${_oP}:${_Arq}"
                        done <<<"${_DirArq}"
                        _file=$(echo -e "${_Pass}" | grep -E "\b$Opc1\b" | cut -d: -f2)
                        [[ -e /etc/bot/files/$_file ]] && {
                            rm /etc/bot/files/$_file
                            ShellBot.sendMessage --chat_id ${message_from_id[$id]} \
                                --text "✅ *successfully deleted* ✅" \
                                --parse_mode markdown
                            break
                        } || {
                            ShellBot.sendMessage --chat_id ${message_from_id[$id]} \
                                --text "$(echo -e "❌ Invalid option")"
                            break
                        }
                    }
                    ;;
                '📤 HOST FILES 📤\n\nsend me the file:')
                    if [ "${update_id[$id]}" ]; then
                        # Monitor file uploads
                        [[ ${message_document_file_id[$id]} ]] && file_id=${message_document_file_id[$id]} && download_file=1
                        # Verifica se o download está ativado.
                        [[ $download_file -eq 1 ]] && {
                            file_id=($file_id)
                            ShellBot.getFile --file_id "${file_id[0]}"
                            ShellBot.downloadFile --file_path ${return[file_path]} --dir "/tmp/file" && {
                                msg='*✅ Successfully hosted file.*\n\n'
                                msg+="*📤 Information*\n\n"
                                msg+="*Name*: ${message_document_file_name}\n"
                                msg+="*Saved in*: /etc/bot/files"
                                ShellBot.sendMessage --chat_id ${message_chat_id[$id]} \
                                    --text "$(echo -e "$msg")" \
                                    --parse_mode markdown
                                mv /tmp/file/$(ls -1rt /tmp/file | tail -n1) /etc/bot/files/${message_document_file_name}
                                break
                            }
                        } || {
                            ShellBot.sendMessage --chat_id ${message_chat_id[$id]} \
                                --text "$(echo -e "❌ Error receiving file ❌")" \
                                --parse_mode markdown
                            break
                        }
                    fi
                    ;;
                'Deseja restaurar ? [sim | nao]')
                    Resp=${message_text[$id]}
                    [[ ${message_from_id[$id]} != ${id_admin} ]] && break
                    [[ $Resp != ?(+|-)+([a-z]) ]] && {
                        ShellBot.sendMessage --chat_id ${id_admin} \
                            --text "$(echo -e "❌ Error ! \n\n⚠️ Use only yes or no")" \
                            --parse_mode html
                        break
                    }
                    [[ "$Resp" = @(Sim|sim|SIM) ]] && {
                        filebkp=$(ls /tmp | grep '.vps')
                        [[ -e /tmp/$filebkp ]] && {
                            mv /tmp/$filebkp /backup.vps
                            cd /
                            tar -xvf backup.vps
                            rm /backup.vps
                            ShellBot.sendMessage --chat_id ${id_admin} \
                                --text "$(echo -e "✅ Backup restored\nsuccessfully!")" \
                                --parse_mode html
                            break
                        }
                    }
                    break
                    ;;
                    # resale MANAGEMENT FUNCTIONS
                    #
                    # Add, remover, limit, date, suspension, report
                    #
                '👥 ADD DEALER 👥\n\nEnter the name:')
                    verifica_access
                    [[ "$_erro" == '1' ]] && break
                    echo "name: ${message_text[$id]}" >$CAD_ARQ
                    ShellBot.sendMessage --chat_id ${message_from_id[$id]} \
                        --text 'Inform his username [Ex: @@opiranv2rayproxy]:' \
                        --reply_markup "$(ShellBot.ForceReply)"
                    ;;
                'Inform his username [Ex: @@opiranv2rayproxy]:')
                    verifica_access
                    [[ "$_erro" == '1' ]] && break
                    _VAR1=$(echo -e ${message_text[$id]} | awk -F '@' {'print $2'})
                    [[ -z $_VAR1 ]] && {
                        ShellBot.sendMessage --chat_id ${message_chat_id[$id]} \
                            --text "$(echo -e "❌ Error \n\n⚠️ inform the username [EX: @@opiranv2rayproxy]")" \
                            --parse_mode html
                        break
                    }
                    [[ -d /etc/bot/resale/$_VAR1 ]] && {
                        ShellBot.sendMessage --chat_id ${message_chat_id[$id]} \
                            --text "$(echo -e "❌ the dealer ${message_text[$id]} already exists")" \
                            --parse_mode html
                        break
                    }
                    echo "User: ${message_text[$id]}" >>$CAD_ARQ
                    ShellBot.sendMessage --chat_id ${message_from_id[$id]} \
                        --text 'How many SSH can it create:' \
                        --reply_markup "$(ShellBot.ForceReply)"
                    ;;
                'How many SSH can it create:')
                    verifica_access
                    [[ "$_erro" == '1' ]] && break
                    [[ ${message_text[$id]} != ?(+|-)+([0-9]) ]] && {
                        ShellBot.sendMessage --chat_id ${message_chat_id[$id]} \
                            --text "$(echo -e "❌ Error ! \n\n⚠️ use only numbers [EX: 10]")" \
                            --parse_mode html
                        break
                    }
                    [[ "${message_from_id[$id]}" != "$id_admin" ]] && {
                        _limTotal=$(grep -w "${message_from_username}" $active | awk '{print $4}')
                        fun_verif_limit_rev ${message_from_username}
                        _limsomarev=$(echo "$_result + ${message_text[$id]}" | bc)
                        [[ "$_limsomarev" -gt "$_limTotal" ]] && {
                            _restant1=$(($_limTotal - $_result))
                            ShellBot.sendMessage --chat_id ${message_chat_id[$id]} \
                                --text "$(echo -e "❌ you don't have enough limit\n\nlimit disponivel: $_restant1 ")" \
                                --parse_mode html
                            break
                        }
                    }
                    echo "limit: ${message_text[$id]}" >>$CAD_ARQ
                    ShellBot.sendMessage --chat_id ${message_from_id[$id]} \
                        --text 'how many days of access:' \
                        --reply_markup "$(ShellBot.ForceReply)"
                    ;;
                'how many days of access:')
                    verifica_access
                    [[ "$_erro" == '1' ]] && break
                    echo "validity: ${message_text[$id]}" >>$CAD_ARQ
                    _clientrev=$(cat $CAD_ARQ)
                    create_rev $CAD_ARQ
                    ShellBot.sendMessage --chat_id ${message_from_id[$id]} \
                        --text "✅ successfully created. ✅\n\n$(<$CAD_ARQ)\n\nBOT: @${message_reply_to_message_from_username}" \
                        --parse_mode html
                    ;;
                    # REMOVE REVENDEDOR
                '🗑 REMOVE DEALER 🗑\n\nInform his username [Ex: @@opiranv2rayproxy]:')
                    echo -e "${message_text[$id]}" >$CAD_ARQ
                    _Var=$(sed -n '1 p' $CAD_ARQ | awk -F '@' {'print $2'})
                    [[ -z $_Var ]] && {
                        ShellBot.sendMessage --chat_id ${message_chat_id[$id]} \
                            --text "$(echo -e "❌ invalid user")" \
                            --parse_mode html
                        break
                    }
                    del_rev $_Var
                    break
                    ;;
                    # alter limit
                '♾ CHANGE RESALE LIMIT ♾\n\nInform his username [Ex: @@opiranv2rayproxy]:')
                    verifica_access
                    [[ "$_erro" == '1' ]] && break
                    echo -e "Dealer: ${message_text[$id]}" >$CAD_ARQ
                    _Var1=$(sed -n '1 p' $CAD_ARQ | awk -F '@' {'print $2'})
                    [[ -z $_Var1 ]] && {
                        ShellBot.sendMessage --chat_id ${message_chat_id[$id]} \
                            --text "$(echo -e "❌ Invalid name !")" \
                            --parse_mode html
                        break
                    }
                    [[ "${message_from_id[$id]}" == "$id_admin" ]] && {
                        [[ $(grep -wc $_Var1 $active) != '0' ]] && {
                            ShellBot.sendMessage --chat_id ${message_from_id[$id]} \
                                --text 'Enter the SSH Limit:' \
                                --reply_markup "$(ShellBot.ForceReply)"
                        } || {
                            ShellBot.sendMessage --chat_id ${message_chat_id[$id]} \
                                --text "$(echo -e "❌ Dealer ${message_text[$id]} does not exist")" \
                                --parse_mode html
                            break
                        }
                    }
                    [[ $(grep -w ${message_from_username} $active | awk '{print $NF}') == 'resale' ]] && {
                        [[ "$(grep -wc "$_Var1" /etc/bot/resale/${message_from_username}/${message_from_username})" != '0' ]] && {
                            ShellBot.sendMessage --chat_id ${message_from_id[$id]} \
                                --text 'Enter the SSH Limit:' \
                                --reply_markup "$(ShellBot.ForceReply)"
                        } || {
                            ShellBot.sendMessage --chat_id ${message_chat_id[$id]} \
                                --text "$(echo -e "❌ Sub-dealer does not exist")" \
                                --parse_mode html
                            break
                        }
                    }
                    ;;
                'Informe o limit SSH:')
                    verifica_access
                    [[ "$_erro" == '1' ]] && break
                    [[ ${message_text[$id]} != ?(+|-)+([0-9]) ]] && {
                        ShellBot.sendMessage --chat_id ${message_chat_id[$id]} \
                            --text "$(echo -e "❌ Error ! \n\nuse only numbers [EX: 1]")" \
                            --parse_mode html
                        break
                    }
                    [[ "${message_from_id[$id]}" != "$id_admin" ]] && {
                        _limTotal=$(grep -w "${message_from_username}" $active | awk '{print $4}')
                        fun_verif_limit_rev ${message_from_username}
                        _limsomarev=$(echo "$_result + ${message_text[$id]}" | bc)

                        [[ $(grep -wc 'SUBresale' /etc/bot/resale/${message_from_username}/${message_from_username}) != '0' ]] && {
                            _limsomarev2=$(echo "$(grep -w 'SUBresale' /etc/bot/resale/${message_from_username}/${message_from_username} | awk {'print $4'} | paste -s -d + | bc)" + "${message_text[$id]}" | bc)
                        } || {
                            _limsomarev2='0'
                        }
                        [[ "$_limsomarev2" -ge "$_limTotal" ]] && {
                            echo $_limsomarev2
                            ShellBot.sendMessage --chat_id ${message_chat_id[$id]} \
                                --text "$(echo -e "❌ you don't have enough limit")" \
                                --parse_mode html
                            break
                        }
                        [[ "$_limsomarev" -gt "$_limTotal" ]] && {
                            [[ "$_limTotal" == "$(($_limTotal - $_result))" ]] && _restant1='0' || _restant1=$(($_limTotal - $_result))
                            ShellBot.sendMessage --chat_id ${message_chat_id[$id]} \
                                --text "$(echo -e "❌ you don't have enough limit\n\nlimit restante: $_restant1 ")" \
                                --parse_mode html
                            break
                        }
                    }
                    echo -e "limit: ${message_text[$id]}" >>$CAD_ARQ
                    lim_rev $CAD_ARQ
                    ShellBot.sendMessage --chat_id ${message_from_id[$id]} \
                        --text "$(echo -e "◈──────────────────◈\n<b>✅ CHANGED RESALE LIMIT !</b> !\n◈──────────────────◈\n\n$(<$CAD_ARQ)")" \
                        --parse_mode html
                    # alter date
                    ;;
                '📆 CHANGE RESALE DATE 📆\n\nInform his username [Ex: @@opiranv2rayproxy]:')
                    verifica_access
                    [[ "$_erro" == '1' ]] && break
                    _VAR1=$(echo -e ${message_text[$id]} | awk -F '@' {'print $2'})
                    [[ -z $_VAR1 ]] && {
                        ShellBot.sendMessage --chat_id ${message_chat_id[$id]} \
                            --text "$(echo -e "Dealer ${message_text[$id]} does not exist")" \
                            --parse_mode html
                        break
                    }
                    [[ "${message_from_id[$id]}" == "$id_admin" ]] && {
                        [[ $(grep -wc $_VAR1 $active) != '0' ]] && {
                            echo -e "Dealer: ${message_text[$id]}" >$CAD_ARQ
                            ShellBot.sendMessage --chat_id ${message_from_id[$id]} \
                                --text 'Access days [Ex: 30]:' \
                                --reply_markup "$(ShellBot.ForceReply)"
                        } || {
                            ShellBot.sendMessage --chat_id ${message_chat_id[$id]} \
                                --text "$(echo -e "❌ The Reseller ${message_text[$id]} does not exist")" \
                                --parse_mode html
                            break
                        }
                    } || {
                        [[ $(grep -w ${message_from_username} $active | awk '{print $NF}') == 'resale' ]] && {
                            [[ "$(grep -wc "$_VAR1" /etc/bot/resale/${message_from_username}/${message_from_username})" != '0' ]] && {
                                echo -e "Dealer: ${message_text[$id]}" >$CAD_ARQ
                                ShellBot.sendMessage --chat_id ${message_from_id[$id]} \
                                    --text 'Access days [Ex: 30]:' \
                                    --reply_markup "$(ShellBot.ForceReply)"
                            } || {
                                ShellBot.sendMessage --chat_id ${message_chat_id[$id]} \
                                    --text "$(echo -e "❌ The SubReseller ${message_text[$id]} does not exist")" \
                                    --parse_mode html
                                break
                            }
                        }
                    }
                    ;;
                'Access days [Ex: 30]:')
                    verifica_access
                    [[ "$_erro" == '1' ]] && break
                    [[ ${message_text[$id]} != ?(+|-)+([0-9]) ]] && {
                        ShellBot.sendMessage --chat_id ${message_chat_id[$id]} \
                            --text "$(echo -e "❌ Error ! \n\nuse only numbers [EX: 30]")" \
                            --parse_mode html
                        break
                    }
                    echo -e "date: ${message_text[$id]}" >>$CAD_ARQ
                    dat_rev $CAD_ARQ
                    [[ "$_erro" == '1' ]] && break
                    ShellBot.sendMessage --chat_id ${message_from_id[$id]} \
                        --text "$(echo -e "◈──────────────────◈\n<b>✅ CHANGED RESALE DATE!</b> !\n◈──────────────────◈\n\n$(<$CAD_ARQ)")" \
                        --parse_mode html
                    ;;
                    # SUSPENDER REVENDEDOR
                '🔒 SUSPEND DEALER 🔒\n\nInform his username [Ex: @@opiranv2rayproxy]:')
                    _VAR1=$(echo -e ${message_text[$id]} | awk -F '@' {'print $2'})
                    [[ -z $_VAR1 ]] && {
                        ShellBot.sendMessage --chat_id ${message_chat_id[$id]} \
                            --text "$(echo -e "❌ Dealer ${message_text[$id]} does not exist")" \
                            --parse_mode html
                        break
                    }
                    susp_rev $_VAR1
                    break
                    ;;
                '👤 CREATE TEST 👤\n\nhow many hours should it last EX: 1:')
                    verifica_access
                    echo $_erro
                    [[ "$_erro" == '1' ]] && break
                    [[ ${message_text[$id]} != ?(+|-)+([0-9]) ]] && {
                        ShellBot.sendMessage --chat_id ${message_chat_id[$id]} \
                            --text "$(echo -e "❌ Error ! \n\nuse only numbers [EX: 1]")" \
                            --parse_mode html
                        >$CAD_ARQ
                        break
                    }
                    [[ "${message_from_id[$id]}" != "$id_admin" ]] && {
                        _limTotal=$(grep -w "${message_from_username}" $active | awk '{print $4}')
                        fun_verif_limit_rev ${message_from_username}
                        _limsomarev2=$(echo "$_result + 1" | bc)
                        [[ "$_limsomarev2" -gt "$_limTotal" ]] && {
                            ShellBot.sendMessage --chat_id ${message_chat_id[$id]} \
                                --text "$(echo -e "❌ you don't have enough limit")" \
                                --parse_mode html
                            >$CAD_ARQ
                            break
                        }
                    }
                    fun_test ${message_text[$id]}
                    ;;
                esac
            fi
        ) &
    done
done
#FIM
